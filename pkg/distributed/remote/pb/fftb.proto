syntax = "proto3";

option go_package = "github.com/wailorman/fftb/pkg/distributed;pb";
option ruby_package = "Fftb";

// go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.26
// go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.1

// protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative helloworld.proto


service Dealer {
  // rpc GetOutputStorageClaim (StorageClaimRequest) returns (StorageClaim) {}
  // rpc AllocateInputStorageClaim (StorageClaimRequest) returns (StorageClaim) {}

  rpc GetAllInputStorageClaims (StorageClaimRequest) returns (StorageClaimList) {}
  rpc AllocateOutputStorageClaim (StorageClaimRequest) returns (StorageClaim) {}

  rpc FinishSegment(FinishSegmentRequest) returns (Empty) {}
  rpc QuitSegment(QuitSegmentRequest) returns (Empty) {}
  rpc FailSegment(FailSegmentRequest) returns (Empty) {}

  rpc FindFreeSegment(FindFreeSegmentRequest) returns (Segment) {}

  rpc Notify(ProgressNotification) returns (Empty) {}
}

message StorageClaimRequest {
  string authorization = 1;
  string segmentId = 2;
  StorageClaimPurpose purpose = 3;
  string name = 4;
}

message ProgressNotification {
  enum Step {
    UPLOADING_INPUT = 0;
    DOWNLOADING_INPUT = 1;
    PROCESSING = 2;
    UPLOADING_OUTPUT = 3;
    DOWNLOADING_OUTPUT = 4;
  }

  Step step = 1;
  string authorization = 2;
  double progress = 3;
  string segmentId = 4;
}

message FinishSegmentRequest {
  string authorization = 1;
  string segmentId = 2;
}

message QuitSegmentRequest {
  string authorization = 1;
  string segmentId = 2;
}

message FailSegmentRequest {
  string authorization = 1;
  string segmentId = 2;
  string failure = 3;
}

message FindFreeSegmentRequest {
  string authorization = 1;
}


// ----------------------------------------------------------------

enum SegmentType {
  CONVERT_V1 = 0;
}

message Segment {
  SegmentType type = 1;
  string id = 2;
  // string orderId = 3;
  ConvertSegmentParams convertParams = 4;
}

message ConvertSegmentParams {
  string videoCodec = 1;
  string hwAccel = 2;
  string videoBitRate = 3;
  int32 videoQuality = 4;
  string preset = 5;
  string scale = 6;
  int32 keyframeInterval = 7;

  string muxer = 8;
  int32 position = 9; // TODO: Deprecated
}

// message YtdlSegmentParams {
//   string url = 1;
//   string videoFormat = 2;
//   string audioFormat = 3;
//   bool downloadFullVideo = 4;
//   bool downloadVideo = 5;
//   bool downloadAudio = 6;
//   bool downloadMetadata = 7;
//   bool downloadCaptions = 8;
// }

enum StorageClaimPurpose {
  NONE = 0; // default
  CONVERT_INPUT = 1;
  CONVERT_OUTPUT = 2;
  // YTDL_FULL_VIDEO = 2;
  // YTDL_AUDIO = 3;
  // YTDL_VIDEO = 4;
  // YTDL_METADATA = 5;
  // YTDL_CAPTIONS = 6;
}

message StorageClaimList {
  repeated StorageClaim storageClaims = 1;
}

message StorageClaim {
  string id = 1;
  string url = 2;
  StorageClaimPurpose purpose = 3;
  string name = 4;
}

message Empty {
}
