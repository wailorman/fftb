syntax = "proto3";

option go_package = "github.com/wailorman/fftb/pkg/distributed;pb";

// go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.26
// go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.1

// protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative helloworld.proto


service Dealer {
  rpc AllocateSegment (DealerRequest) returns (Segment) {}
  rpc GetOutputStorageClaim (StorageClaimRequest) returns (StorageClaim) {}
  rpc AllocateInputStorageClaim (StorageClaimRequest) returns (StorageClaim) {}
  // rpc GetQueuedSegmentsCount (GetQueuedSegmentsCountRequest) returns (GetQueuedSegmentsCountResponse) {}
  // rpc GetSegmentsByOrderId (GetSegmentsByOrderIdRequest) returns (SegmentsListResponse) {}
  // rpc GetSegmentById (GetSegmentsByOrderIdRequest) returns (SegmentResponse) {}

  rpc GetInputStorageClaim (StorageClaimRequest) returns (StorageClaim) {}
  rpc AllocateOutputStorageClaim (StorageClaimRequest) returns (StorageClaim) {}

  // rpc Notify(ProgressNotification) returns (Empty) {}
}

message DealerRequest {
  string authorization = 1;
  string type = 2;
  string id = 3;
  string orderId = 4;
  ConvertSegmentParams convertParams = 5;
}

// message AllocateSegmentResponse {
//   Segment segment = 1;
// }

message StorageClaimRequest {
  string authorization = 1;
  string segmentId = 2;
}

// message StorageClaimResponse {
//   StorageClaim storageClaim = 1;
// }

// message GetQueuedSegmentsCountRequest {
//   string authorization = 1;
// }

// message GetQueuedSegmentsCountResponse {
//   int64 count = 1;
// }

// message GetSegmentsByOrderIdRequest {
//   string orderId = 1;
// }

// message SegmentsListResponse {
//   repeated Segment segments = 1;
// }

// message GetSegmentByIdRequest {
//   string segmentId = 1;
// }

// message SegmentResponse {
//   Segment segment = 1;
// }

// message ProgressNotification {
//   enum Step {
//     RAW_UPLOAD = 0;
//     RESULT_DOWNLOAD = 1;
//     RAW_DOWNLOAD = 2;
//     RESULT_UPLOAD = 3;
//     PROCESS = 4;
//   }

//   Step step = 1;
//   double progress = 2;
// }

// ----------------------------------------------------------------

message Segment {
  string type = 1;
  string id = 2;
  string orderId = 3;
  ConvertSegmentParams convertParams = 4;
}

message ConvertSegmentParams {
  string videoCodec = 1;
  string hwAccel = 2;
  string videoBitRate = 3;
  int32 videoQuality = 4;
  string preset = 5;
  string scale = 6;
  int32 keyframeInterval = 7;

  string muxer = 8;
  int32 position = 9;
}

message StorageClaim {
  string url = 1;
}

// message Empty {
// }
