// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DealerClient is the client API for Dealer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DealerClient interface {
	AllocateSegment(ctx context.Context, in *DealerRequest, opts ...grpc.CallOption) (*Segment, error)
	GetOutputStorageClaim(ctx context.Context, in *StorageClaimRequest, opts ...grpc.CallOption) (*StorageClaim, error)
	AllocateInputStorageClaim(ctx context.Context, in *StorageClaimRequest, opts ...grpc.CallOption) (*StorageClaim, error)
	GetInputStorageClaim(ctx context.Context, in *StorageClaimRequest, opts ...grpc.CallOption) (*StorageClaim, error)
	AllocateOutputStorageClaim(ctx context.Context, in *StorageClaimRequest, opts ...grpc.CallOption) (*StorageClaim, error)
}

type dealerClient struct {
	cc grpc.ClientConnInterface
}

func NewDealerClient(cc grpc.ClientConnInterface) DealerClient {
	return &dealerClient{cc}
}

func (c *dealerClient) AllocateSegment(ctx context.Context, in *DealerRequest, opts ...grpc.CallOption) (*Segment, error) {
	out := new(Segment)
	err := c.cc.Invoke(ctx, "/Dealer/AllocateSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealerClient) GetOutputStorageClaim(ctx context.Context, in *StorageClaimRequest, opts ...grpc.CallOption) (*StorageClaim, error) {
	out := new(StorageClaim)
	err := c.cc.Invoke(ctx, "/Dealer/GetOutputStorageClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealerClient) AllocateInputStorageClaim(ctx context.Context, in *StorageClaimRequest, opts ...grpc.CallOption) (*StorageClaim, error) {
	out := new(StorageClaim)
	err := c.cc.Invoke(ctx, "/Dealer/AllocateInputStorageClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealerClient) GetInputStorageClaim(ctx context.Context, in *StorageClaimRequest, opts ...grpc.CallOption) (*StorageClaim, error) {
	out := new(StorageClaim)
	err := c.cc.Invoke(ctx, "/Dealer/GetInputStorageClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealerClient) AllocateOutputStorageClaim(ctx context.Context, in *StorageClaimRequest, opts ...grpc.CallOption) (*StorageClaim, error) {
	out := new(StorageClaim)
	err := c.cc.Invoke(ctx, "/Dealer/AllocateOutputStorageClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DealerServer is the server API for Dealer service.
// All implementations must embed UnimplementedDealerServer
// for forward compatibility
type DealerServer interface {
	AllocateSegment(context.Context, *DealerRequest) (*Segment, error)
	GetOutputStorageClaim(context.Context, *StorageClaimRequest) (*StorageClaim, error)
	AllocateInputStorageClaim(context.Context, *StorageClaimRequest) (*StorageClaim, error)
	GetInputStorageClaim(context.Context, *StorageClaimRequest) (*StorageClaim, error)
	AllocateOutputStorageClaim(context.Context, *StorageClaimRequest) (*StorageClaim, error)
	mustEmbedUnimplementedDealerServer()
}

// UnimplementedDealerServer must be embedded to have forward compatible implementations.
type UnimplementedDealerServer struct {
}

func (UnimplementedDealerServer) AllocateSegment(context.Context, *DealerRequest) (*Segment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateSegment not implemented")
}
func (UnimplementedDealerServer) GetOutputStorageClaim(context.Context, *StorageClaimRequest) (*StorageClaim, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutputStorageClaim not implemented")
}
func (UnimplementedDealerServer) AllocateInputStorageClaim(context.Context, *StorageClaimRequest) (*StorageClaim, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateInputStorageClaim not implemented")
}
func (UnimplementedDealerServer) GetInputStorageClaim(context.Context, *StorageClaimRequest) (*StorageClaim, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInputStorageClaim not implemented")
}
func (UnimplementedDealerServer) AllocateOutputStorageClaim(context.Context, *StorageClaimRequest) (*StorageClaim, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateOutputStorageClaim not implemented")
}
func (UnimplementedDealerServer) mustEmbedUnimplementedDealerServer() {}

// UnsafeDealerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DealerServer will
// result in compilation errors.
type UnsafeDealerServer interface {
	mustEmbedUnimplementedDealerServer()
}

func RegisterDealerServer(s grpc.ServiceRegistrar, srv DealerServer) {
	s.RegisterService(&Dealer_ServiceDesc, srv)
}

func _Dealer_AllocateSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DealerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealerServer).AllocateSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dealer/AllocateSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealerServer).AllocateSegment(ctx, req.(*DealerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dealer_GetOutputStorageClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealerServer).GetOutputStorageClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dealer/GetOutputStorageClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealerServer).GetOutputStorageClaim(ctx, req.(*StorageClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dealer_AllocateInputStorageClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealerServer).AllocateInputStorageClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dealer/AllocateInputStorageClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealerServer).AllocateInputStorageClaim(ctx, req.(*StorageClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dealer_GetInputStorageClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealerServer).GetInputStorageClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dealer/GetInputStorageClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealerServer).GetInputStorageClaim(ctx, req.(*StorageClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dealer_AllocateOutputStorageClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealerServer).AllocateOutputStorageClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dealer/AllocateOutputStorageClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealerServer).AllocateOutputStorageClaim(ctx, req.(*StorageClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dealer_ServiceDesc is the grpc.ServiceDesc for Dealer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dealer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Dealer",
	HandlerType: (*DealerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllocateSegment",
			Handler:    _Dealer_AllocateSegment_Handler,
		},
		{
			MethodName: "GetOutputStorageClaim",
			Handler:    _Dealer_GetOutputStorageClaim_Handler,
		},
		{
			MethodName: "AllocateInputStorageClaim",
			Handler:    _Dealer_AllocateInputStorageClaim_Handler,
		},
		{
			MethodName: "GetInputStorageClaim",
			Handler:    _Dealer_GetInputStorageClaim_Handler,
		},
		{
			MethodName: "AllocateOutputStorageClaim",
			Handler:    _Dealer_AllocateOutputStorageClaim_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/distributed/remote/pb/fftb.proto",
}
