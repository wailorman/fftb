// Package dealer provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package dealer

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
	"github.com/pkg/errors"
)

const (
	BasicAuthScopes  = "basicAuth.Scopes"
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Authority defines model for Authority.
type Authority struct {
	Key string `json:"key"`
}

// AuthorityInput defines model for AuthorityInput.
type AuthorityInput struct {
	Name string `json:"name"`
}

// CancellationReason defines model for CancellationReason.
type CancellationReason struct {
	Reason string `json:"reason"`
}

// ConvertDealerRequest defines model for ConvertDealerRequest.
type ConvertDealerRequest struct {
	Id       string        `json:"id"`
	Muxer    string        `json:"muxer"`
	OrderId  string        `json:"order_id"`
	Params   ConvertParams `json:"params"`
	Position int           `json:"position"`
	Type     string        `json:"type"`
}

// ConvertParams defines model for ConvertParams.
type ConvertParams struct {
	HwAccel          string `json:"hw_accel"`
	KeyframeInterval int    `json:"keyframe_interval"`
	Preset           string `json:"preset"`
	Scale            string `json:"scale"`
	VideoBitRate     string `json:"video_bit_rate"`
	VideoCodec       string `json:"video_codec"`
	VideoQuality     int    `json:"video_quality"`
}

// ConvertSegment defines model for ConvertSegment.
type ConvertSegment struct {
	Id       string        `json:"id"`
	Muxer    string        `json:"muxer"`
	OrderId  string        `json:"order_id"`
	Params   ConvertParams `json:"params"`
	Position int           `json:"position"`
	Type     string        `json:"type"`
}

// Count defines model for Count.
type Count struct {
	Count int `json:"count"`
}

// FailureInput defines model for FailureInput.
type FailureInput struct {
	Failure string `json:"failure"`
}

// RFC 7807 Problem Details for HTTP APIs
type ProblemDetails struct {
	Detail *string                `json:"detail,omitempty"`
	Fields *ProblemDetails_Fields `json:"fields,omitempty"`
	Title  string                 `json:"title"`
	Type   *string                `json:"type,omitempty"`
}

// ProblemDetails_Fields defines model for ProblemDetails.Fields.
type ProblemDetails_Fields struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ProgressInput defines model for ProgressInput.
type ProgressInput struct {
	Progress float32 `json:"progress"`
}

// Session defines model for Session.
type Session struct {
	Key string `json:"key"`
}

// SessionInput defines model for SessionInput.
type SessionInput struct {
	AuthorityKey string `json:"authority_key"`
}

// StorageClaim defines model for StorageClaim.
type StorageClaim struct {
	Url string `json:"url"`
}

// OrderIDParam defines model for orderIDParam.
type OrderIDParam string

// SegmentIDParam defines model for segmentIDParam.
type SegmentIDParam string

// ResponseAllocateAuthority defines model for ResponseAllocateAuthority.
type ResponseAllocateAuthority Authority

// ResponseCount defines model for ResponseCount.
type ResponseCount Count

// ResponseCreateSession defines model for ResponseCreateSession.
type ResponseCreateSession Session

// RFC 7807 Problem Details for HTTP APIs
type ResponseForbidden ProblemDetails

// RFC 7807 Problem Details for HTTP APIs
type ResponseNotFound ProblemDetails

// ResponseSegment defines model for ResponseSegment.
type ResponseSegment ConvertSegment

// ResponseSegments defines model for ResponseSegments.
type ResponseSegments []ConvertSegment

// ResponseStorageClaim defines model for ResponseStorageClaim.
type ResponseStorageClaim StorageClaim

// RFC 7807 Problem Details for HTTP APIs
type ResponseUnauthorized ProblemDetails

// RFC 7807 Problem Details for HTTP APIs
type ResponseUnprocessableEntity ProblemDetails

// AllocateAuthorityJSONBody defines parameters for AllocateAuthority.
type AllocateAuthorityJSONBody AuthorityInput

// AllocateSegmentJSONBody defines parameters for AllocateSegment.
type AllocateSegmentJSONBody ConvertDealerRequest

// CancelSegmentJSONBody defines parameters for CancelSegment.
type CancelSegmentJSONBody CancellationReason

// FailSegmentJSONBody defines parameters for FailSegment.
type FailSegmentJSONBody FailureInput

// NotifyProcessJSONBody defines parameters for NotifyProcess.
type NotifyProcessJSONBody ProgressInput

// CreateSessionJSONBody defines parameters for CreateSession.
type CreateSessionJSONBody SessionInput

// AllocateAuthorityJSONRequestBody defines body for AllocateAuthority for application/json ContentType.
type AllocateAuthorityJSONRequestBody AllocateAuthorityJSONBody

// AllocateSegmentJSONRequestBody defines body for AllocateSegment for application/json ContentType.
type AllocateSegmentJSONRequestBody AllocateSegmentJSONBody

// CancelSegmentJSONRequestBody defines body for CancelSegment for application/json ContentType.
type CancelSegmentJSONRequestBody CancelSegmentJSONBody

// FailSegmentJSONRequestBody defines body for FailSegment for application/json ContentType.
type FailSegmentJSONRequestBody FailSegmentJSONBody

// NotifyProcessJSONRequestBody defines body for NotifyProcess for application/json ContentType.
type NotifyProcessJSONRequestBody NotifyProcessJSONBody

// CreateSessionJSONRequestBody defines body for CreateSession for application/json ContentType.
type CreateSessionJSONRequestBody CreateSessionJSONBody

// Getter for additional properties for ProblemDetails_Fields. Returns the specified
// element and whether it was found
func (a ProblemDetails_Fields) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProblemDetails_Fields
func (a *ProblemDetails_Fields) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProblemDetails_Fields to handle AdditionalProperties
func (a *ProblemDetails_Fields) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProblemDetails_Fields to handle AdditionalProperties
func (a ProblemDetails_Fields) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AllocateAuthority request  with any body
	AllocateAuthorityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AllocateAuthority(ctx context.Context, body AllocateAuthorityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetQueuedSegmentsCount request
	GetQueuedSegmentsCount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchSegments request
	SearchSegments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AllocateSegment request  with any body
	AllocateSegmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AllocateSegment(ctx context.Context, body AllocateSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindFreeSegment request
	FindFreeSegment(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSegmentByID request
	GetSegmentByID(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AcceptSegment request
	AcceptSegment(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelSegment request  with any body
	CancelSegmentWithBody(ctx context.Context, segmentID SegmentIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CancelSegment(ctx context.Context, segmentID SegmentIDParam, body CancelSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FailSegment request  with any body
	FailSegmentWithBody(ctx context.Context, segmentID SegmentIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FailSegment(ctx context.Context, segmentID SegmentIDParam, body FailSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FinishSegment request
	FinishSegment(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishSegment request
	PublishSegment(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuitSegment request
	QuitSegment(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RepublishSegment request
	RepublishSegment(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInputStorageClaim request
	GetInputStorageClaim(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AllocateInputStorageClaim request
	AllocateInputStorageClaim(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotifyProcess request  with any body
	NotifyProcessWithBody(ctx context.Context, segmentID SegmentIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NotifyProcess(ctx context.Context, segmentID SegmentIDParam, body NotifyProcessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOutputStorageClaim request
	GetOutputStorageClaim(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AllocateOutputStorageClaim request
	AllocateOutputStorageClaim(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSession request  with any body
	CreateSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSession(ctx context.Context, body CreateSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSegmentsByOrderID request
	GetSegmentsByOrderID(ctx context.Context, orderID OrderIDParam, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AllocateAuthorityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllocateAuthorityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AllocateAuthority(ctx context.Context, body AllocateAuthorityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllocateAuthorityRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetQueuedSegmentsCount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetQueuedSegmentsCountRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchSegments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchSegmentsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AllocateSegmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllocateSegmentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AllocateSegment(ctx context.Context, body AllocateSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllocateSegmentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindFreeSegment(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindFreeSegmentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSegmentByID(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSegmentByIDRequest(c.Server, segmentID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AcceptSegment(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcceptSegmentRequest(c.Server, segmentID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelSegmentWithBody(ctx context.Context, segmentID SegmentIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelSegmentRequestWithBody(c.Server, segmentID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelSegment(ctx context.Context, segmentID SegmentIDParam, body CancelSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelSegmentRequest(c.Server, segmentID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FailSegmentWithBody(ctx context.Context, segmentID SegmentIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFailSegmentRequestWithBody(c.Server, segmentID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FailSegment(ctx context.Context, segmentID SegmentIDParam, body FailSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFailSegmentRequest(c.Server, segmentID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FinishSegment(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFinishSegmentRequest(c.Server, segmentID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishSegment(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishSegmentRequest(c.Server, segmentID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuitSegment(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuitSegmentRequest(c.Server, segmentID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RepublishSegment(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRepublishSegmentRequest(c.Server, segmentID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInputStorageClaim(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInputStorageClaimRequest(c.Server, segmentID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AllocateInputStorageClaim(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllocateInputStorageClaimRequest(c.Server, segmentID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotifyProcessWithBody(ctx context.Context, segmentID SegmentIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotifyProcessRequestWithBody(c.Server, segmentID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotifyProcess(ctx context.Context, segmentID SegmentIDParam, body NotifyProcessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotifyProcessRequest(c.Server, segmentID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOutputStorageClaim(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOutputStorageClaimRequest(c.Server, segmentID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AllocateOutputStorageClaim(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllocateOutputStorageClaimRequest(c.Server, segmentID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSessionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSession(ctx context.Context, body CreateSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSessionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSegmentsByOrderID(ctx context.Context, orderID OrderIDParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSegmentsByOrderIDRequest(c.Server, orderID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAllocateAuthorityRequest calls the generic AllocateAuthority builder with application/json body
func NewAllocateAuthorityRequest(server string, body AllocateAuthorityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAllocateAuthorityRequestWithBody(server, "application/json", bodyReader)
}

// NewAllocateAuthorityRequestWithBody generates requests for AllocateAuthority with any type of body
func NewAllocateAuthorityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorities")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetQueuedSegmentsCountRequest generates requests for GetQueuedSegmentsCount
func NewGetQueuedSegmentsCountRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/queued_segments_count")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchSegmentsRequest generates requests for SearchSegments
func NewSearchSegmentsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/segments")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAllocateSegmentRequest calls the generic AllocateSegment builder with application/json body
func NewAllocateSegmentRequest(server string, body AllocateSegmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAllocateSegmentRequestWithBody(server, "application/json", bodyReader)
}

// NewAllocateSegmentRequestWithBody generates requests for AllocateSegment with any type of body
func NewAllocateSegmentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/segments")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindFreeSegmentRequest generates requests for FindFreeSegment
func NewFindFreeSegmentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/segments/free")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSegmentByIDRequest generates requests for GetSegmentByID
func NewGetSegmentByIDRequest(server string, segmentID SegmentIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "segmentID", runtime.ParamLocationPath, segmentID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/segments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAcceptSegmentRequest generates requests for AcceptSegment
func NewAcceptSegmentRequest(server string, segmentID SegmentIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "segmentID", runtime.ParamLocationPath, segmentID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/segments/%s/actions/accept", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCancelSegmentRequest calls the generic CancelSegment builder with application/json body
func NewCancelSegmentRequest(server string, segmentID SegmentIDParam, body CancelSegmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCancelSegmentRequestWithBody(server, segmentID, "application/json", bodyReader)
}

// NewCancelSegmentRequestWithBody generates requests for CancelSegment with any type of body
func NewCancelSegmentRequestWithBody(server string, segmentID SegmentIDParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "segmentID", runtime.ParamLocationPath, segmentID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/segments/%s/actions/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFailSegmentRequest calls the generic FailSegment builder with application/json body
func NewFailSegmentRequest(server string, segmentID SegmentIDParam, body FailSegmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFailSegmentRequestWithBody(server, segmentID, "application/json", bodyReader)
}

// NewFailSegmentRequestWithBody generates requests for FailSegment with any type of body
func NewFailSegmentRequestWithBody(server string, segmentID SegmentIDParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "segmentID", runtime.ParamLocationPath, segmentID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/segments/%s/actions/fail", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFinishSegmentRequest generates requests for FinishSegment
func NewFinishSegmentRequest(server string, segmentID SegmentIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "segmentID", runtime.ParamLocationPath, segmentID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/segments/%s/actions/finish", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublishSegmentRequest generates requests for PublishSegment
func NewPublishSegmentRequest(server string, segmentID SegmentIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "segmentID", runtime.ParamLocationPath, segmentID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/segments/%s/actions/publish", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuitSegmentRequest generates requests for QuitSegment
func NewQuitSegmentRequest(server string, segmentID SegmentIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "segmentID", runtime.ParamLocationPath, segmentID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/segments/%s/actions/quit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRepublishSegmentRequest generates requests for RepublishSegment
func NewRepublishSegmentRequest(server string, segmentID SegmentIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "segmentID", runtime.ParamLocationPath, segmentID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/segments/%s/actions/republish", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInputStorageClaimRequest generates requests for GetInputStorageClaim
func NewGetInputStorageClaimRequest(server string, segmentID SegmentIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "segmentID", runtime.ParamLocationPath, segmentID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/segments/%s/input-storage-claim", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAllocateInputStorageClaimRequest generates requests for AllocateInputStorageClaim
func NewAllocateInputStorageClaimRequest(server string, segmentID SegmentIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "segmentID", runtime.ParamLocationPath, segmentID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/segments/%s/input-storage-claim", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNotifyProcessRequest calls the generic NotifyProcess builder with application/json body
func NewNotifyProcessRequest(server string, segmentID SegmentIDParam, body NotifyProcessJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNotifyProcessRequestWithBody(server, segmentID, "application/json", bodyReader)
}

// NewNotifyProcessRequestWithBody generates requests for NotifyProcess with any type of body
func NewNotifyProcessRequestWithBody(server string, segmentID SegmentIDParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "segmentID", runtime.ParamLocationPath, segmentID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/segments/%s/notifications/process", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOutputStorageClaimRequest generates requests for GetOutputStorageClaim
func NewGetOutputStorageClaimRequest(server string, segmentID SegmentIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "segmentID", runtime.ParamLocationPath, segmentID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/segments/%s/output-storage-claim", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAllocateOutputStorageClaimRequest generates requests for AllocateOutputStorageClaim
func NewAllocateOutputStorageClaimRequest(server string, segmentID SegmentIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "segmentID", runtime.ParamLocationPath, segmentID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/segments/%s/output-storage-claim", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSessionRequest calls the generic CreateSession builder with application/json body
func NewCreateSessionRequest(server string, body CreateSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSessionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSessionRequestWithBody generates requests for CreateSession with any type of body
func NewCreateSessionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sessions")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSegmentsByOrderIDRequest generates requests for GetSegmentsByOrderID
func NewGetSegmentsByOrderIDRequest(server string, orderID OrderIDParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderID", runtime.ParamLocationPath, orderID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/segments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AllocateAuthority request  with any body
	AllocateAuthorityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AllocateAuthorityResponse, error)

	AllocateAuthorityWithResponse(ctx context.Context, body AllocateAuthorityJSONRequestBody, reqEditors ...RequestEditorFn) (*AllocateAuthorityResponse, error)

	// GetQueuedSegmentsCount request
	GetQueuedSegmentsCountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetQueuedSegmentsCountResponse, error)

	// SearchSegments request
	SearchSegmentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SearchSegmentsResponse, error)

	// AllocateSegment request  with any body
	AllocateSegmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AllocateSegmentResponse, error)

	AllocateSegmentWithResponse(ctx context.Context, body AllocateSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*AllocateSegmentResponse, error)

	// FindFreeSegment request
	FindFreeSegmentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*FindFreeSegmentResponse, error)

	// GetSegmentByID request
	GetSegmentByIDWithResponse(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*GetSegmentByIDResponse, error)

	// AcceptSegment request
	AcceptSegmentWithResponse(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*AcceptSegmentResponse, error)

	// CancelSegment request  with any body
	CancelSegmentWithBodyWithResponse(ctx context.Context, segmentID SegmentIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelSegmentResponse, error)

	CancelSegmentWithResponse(ctx context.Context, segmentID SegmentIDParam, body CancelSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelSegmentResponse, error)

	// FailSegment request  with any body
	FailSegmentWithBodyWithResponse(ctx context.Context, segmentID SegmentIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FailSegmentResponse, error)

	FailSegmentWithResponse(ctx context.Context, segmentID SegmentIDParam, body FailSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*FailSegmentResponse, error)

	// FinishSegment request
	FinishSegmentWithResponse(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*FinishSegmentResponse, error)

	// PublishSegment request
	PublishSegmentWithResponse(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*PublishSegmentResponse, error)

	// QuitSegment request
	QuitSegmentWithResponse(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*QuitSegmentResponse, error)

	// RepublishSegment request
	RepublishSegmentWithResponse(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*RepublishSegmentResponse, error)

	// GetInputStorageClaim request
	GetInputStorageClaimWithResponse(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*GetInputStorageClaimResponse, error)

	// AllocateInputStorageClaim request
	AllocateInputStorageClaimWithResponse(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*AllocateInputStorageClaimResponse, error)

	// NotifyProcess request  with any body
	NotifyProcessWithBodyWithResponse(ctx context.Context, segmentID SegmentIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotifyProcessResponse, error)

	NotifyProcessWithResponse(ctx context.Context, segmentID SegmentIDParam, body NotifyProcessJSONRequestBody, reqEditors ...RequestEditorFn) (*NotifyProcessResponse, error)

	// GetOutputStorageClaim request
	GetOutputStorageClaimWithResponse(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*GetOutputStorageClaimResponse, error)

	// AllocateOutputStorageClaim request
	AllocateOutputStorageClaimWithResponse(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*AllocateOutputStorageClaimResponse, error)

	// CreateSession request  with any body
	CreateSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSessionResponse, error)

	CreateSessionWithResponse(ctx context.Context, body CreateSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSessionResponse, error)

	// GetSegmentsByOrderID request
	GetSegmentsByOrderIDWithResponse(ctx context.Context, orderID OrderIDParam, reqEditors ...RequestEditorFn) (*GetSegmentsByOrderIDResponse, error)
}

type AllocateAuthorityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Authority
	JSON401      *ProblemDetails
	JSON403      *ProblemDetails
	JSON422      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r AllocateAuthorityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AllocateAuthorityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetQueuedSegmentsCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Count
	JSON401      *ProblemDetails
	JSON403      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetQueuedSegmentsCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetQueuedSegmentsCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchSegmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ConvertSegment
	JSON401      *ProblemDetails
	JSON403      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r SearchSegmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchSegmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AllocateSegmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConvertSegment
	JSON401      *ProblemDetails
	JSON403      *ProblemDetails
	JSON422      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r AllocateSegmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AllocateSegmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindFreeSegmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConvertSegment
	JSON401      *ProblemDetails
	JSON403      *ProblemDetails
	JSON404      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r FindFreeSegmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindFreeSegmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSegmentByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConvertSegment
	JSON401      *ProblemDetails
	JSON403      *ProblemDetails
	JSON404      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetSegmentByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSegmentByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AcceptSegmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *ProblemDetails
	JSON403      *ProblemDetails
	JSON404      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r AcceptSegmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AcceptSegmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelSegmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *ProblemDetails
	JSON403      *ProblemDetails
	JSON404      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r CancelSegmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelSegmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FailSegmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *ProblemDetails
	JSON403      *ProblemDetails
	JSON404      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r FailSegmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FailSegmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FinishSegmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *ProblemDetails
	JSON403      *ProblemDetails
	JSON404      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r FinishSegmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FinishSegmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishSegmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *ProblemDetails
	JSON403      *ProblemDetails
	JSON404      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r PublishSegmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishSegmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuitSegmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *ProblemDetails
	JSON403      *ProblemDetails
	JSON404      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r QuitSegmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuitSegmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RepublishSegmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *ProblemDetails
	JSON403      *ProblemDetails
	JSON404      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r RepublishSegmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RepublishSegmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInputStorageClaimResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StorageClaim
	JSON401      *ProblemDetails
	JSON403      *ProblemDetails
	JSON404      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetInputStorageClaimResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInputStorageClaimResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AllocateInputStorageClaimResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StorageClaim
	JSON401      *ProblemDetails
	JSON403      *ProblemDetails
	JSON404      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r AllocateInputStorageClaimResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AllocateInputStorageClaimResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NotifyProcessResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *ProblemDetails
	JSON403      *ProblemDetails
	JSON404      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r NotifyProcessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotifyProcessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOutputStorageClaimResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StorageClaim
	JSON401      *ProblemDetails
	JSON403      *ProblemDetails
	JSON404      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetOutputStorageClaimResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOutputStorageClaimResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AllocateOutputStorageClaimResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StorageClaim
	JSON401      *ProblemDetails
	JSON403      *ProblemDetails
	JSON404      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r AllocateOutputStorageClaimResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AllocateOutputStorageClaimResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Session
	JSON401      *ProblemDetails
	JSON403      *ProblemDetails
	JSON422      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r CreateSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSegmentsByOrderIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ConvertSegment
	JSON401      *ProblemDetails
	JSON403      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetSegmentsByOrderIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSegmentsByOrderIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AllocateAuthorityWithBodyWithResponse request with arbitrary body returning *AllocateAuthorityResponse
func (c *ClientWithResponses) AllocateAuthorityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AllocateAuthorityResponse, error) {
	rsp, err := c.AllocateAuthorityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllocateAuthorityResponse(rsp)
}

func (c *ClientWithResponses) AllocateAuthorityWithResponse(ctx context.Context, body AllocateAuthorityJSONRequestBody, reqEditors ...RequestEditorFn) (*AllocateAuthorityResponse, error) {
	rsp, err := c.AllocateAuthority(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllocateAuthorityResponse(rsp)
}

// GetQueuedSegmentsCountWithResponse request returning *GetQueuedSegmentsCountResponse
func (c *ClientWithResponses) GetQueuedSegmentsCountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetQueuedSegmentsCountResponse, error) {
	rsp, err := c.GetQueuedSegmentsCount(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetQueuedSegmentsCountResponse(rsp)
}

// SearchSegmentsWithResponse request returning *SearchSegmentsResponse
func (c *ClientWithResponses) SearchSegmentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SearchSegmentsResponse, error) {
	rsp, err := c.SearchSegments(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchSegmentsResponse(rsp)
}

// AllocateSegmentWithBodyWithResponse request with arbitrary body returning *AllocateSegmentResponse
func (c *ClientWithResponses) AllocateSegmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AllocateSegmentResponse, error) {
	rsp, err := c.AllocateSegmentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllocateSegmentResponse(rsp)
}

func (c *ClientWithResponses) AllocateSegmentWithResponse(ctx context.Context, body AllocateSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*AllocateSegmentResponse, error) {
	rsp, err := c.AllocateSegment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllocateSegmentResponse(rsp)
}

// FindFreeSegmentWithResponse request returning *FindFreeSegmentResponse
func (c *ClientWithResponses) FindFreeSegmentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*FindFreeSegmentResponse, error) {
	rsp, err := c.FindFreeSegment(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindFreeSegmentResponse(rsp)
}

// GetSegmentByIDWithResponse request returning *GetSegmentByIDResponse
func (c *ClientWithResponses) GetSegmentByIDWithResponse(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*GetSegmentByIDResponse, error) {
	rsp, err := c.GetSegmentByID(ctx, segmentID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSegmentByIDResponse(rsp)
}

// AcceptSegmentWithResponse request returning *AcceptSegmentResponse
func (c *ClientWithResponses) AcceptSegmentWithResponse(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*AcceptSegmentResponse, error) {
	rsp, err := c.AcceptSegment(ctx, segmentID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcceptSegmentResponse(rsp)
}

// CancelSegmentWithBodyWithResponse request with arbitrary body returning *CancelSegmentResponse
func (c *ClientWithResponses) CancelSegmentWithBodyWithResponse(ctx context.Context, segmentID SegmentIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelSegmentResponse, error) {
	rsp, err := c.CancelSegmentWithBody(ctx, segmentID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelSegmentResponse(rsp)
}

func (c *ClientWithResponses) CancelSegmentWithResponse(ctx context.Context, segmentID SegmentIDParam, body CancelSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelSegmentResponse, error) {
	rsp, err := c.CancelSegment(ctx, segmentID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelSegmentResponse(rsp)
}

// FailSegmentWithBodyWithResponse request with arbitrary body returning *FailSegmentResponse
func (c *ClientWithResponses) FailSegmentWithBodyWithResponse(ctx context.Context, segmentID SegmentIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FailSegmentResponse, error) {
	rsp, err := c.FailSegmentWithBody(ctx, segmentID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFailSegmentResponse(rsp)
}

func (c *ClientWithResponses) FailSegmentWithResponse(ctx context.Context, segmentID SegmentIDParam, body FailSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*FailSegmentResponse, error) {
	rsp, err := c.FailSegment(ctx, segmentID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFailSegmentResponse(rsp)
}

// FinishSegmentWithResponse request returning *FinishSegmentResponse
func (c *ClientWithResponses) FinishSegmentWithResponse(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*FinishSegmentResponse, error) {
	rsp, err := c.FinishSegment(ctx, segmentID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFinishSegmentResponse(rsp)
}

// PublishSegmentWithResponse request returning *PublishSegmentResponse
func (c *ClientWithResponses) PublishSegmentWithResponse(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*PublishSegmentResponse, error) {
	rsp, err := c.PublishSegment(ctx, segmentID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishSegmentResponse(rsp)
}

// QuitSegmentWithResponse request returning *QuitSegmentResponse
func (c *ClientWithResponses) QuitSegmentWithResponse(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*QuitSegmentResponse, error) {
	rsp, err := c.QuitSegment(ctx, segmentID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuitSegmentResponse(rsp)
}

// RepublishSegmentWithResponse request returning *RepublishSegmentResponse
func (c *ClientWithResponses) RepublishSegmentWithResponse(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*RepublishSegmentResponse, error) {
	rsp, err := c.RepublishSegment(ctx, segmentID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRepublishSegmentResponse(rsp)
}

// GetInputStorageClaimWithResponse request returning *GetInputStorageClaimResponse
func (c *ClientWithResponses) GetInputStorageClaimWithResponse(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*GetInputStorageClaimResponse, error) {
	rsp, err := c.GetInputStorageClaim(ctx, segmentID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInputStorageClaimResponse(rsp)
}

// AllocateInputStorageClaimWithResponse request returning *AllocateInputStorageClaimResponse
func (c *ClientWithResponses) AllocateInputStorageClaimWithResponse(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*AllocateInputStorageClaimResponse, error) {
	rsp, err := c.AllocateInputStorageClaim(ctx, segmentID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllocateInputStorageClaimResponse(rsp)
}

// NotifyProcessWithBodyWithResponse request with arbitrary body returning *NotifyProcessResponse
func (c *ClientWithResponses) NotifyProcessWithBodyWithResponse(ctx context.Context, segmentID SegmentIDParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NotifyProcessResponse, error) {
	rsp, err := c.NotifyProcessWithBody(ctx, segmentID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotifyProcessResponse(rsp)
}

func (c *ClientWithResponses) NotifyProcessWithResponse(ctx context.Context, segmentID SegmentIDParam, body NotifyProcessJSONRequestBody, reqEditors ...RequestEditorFn) (*NotifyProcessResponse, error) {
	rsp, err := c.NotifyProcess(ctx, segmentID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNotifyProcessResponse(rsp)
}

// GetOutputStorageClaimWithResponse request returning *GetOutputStorageClaimResponse
func (c *ClientWithResponses) GetOutputStorageClaimWithResponse(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*GetOutputStorageClaimResponse, error) {
	rsp, err := c.GetOutputStorageClaim(ctx, segmentID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOutputStorageClaimResponse(rsp)
}

// AllocateOutputStorageClaimWithResponse request returning *AllocateOutputStorageClaimResponse
func (c *ClientWithResponses) AllocateOutputStorageClaimWithResponse(ctx context.Context, segmentID SegmentIDParam, reqEditors ...RequestEditorFn) (*AllocateOutputStorageClaimResponse, error) {
	rsp, err := c.AllocateOutputStorageClaim(ctx, segmentID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllocateOutputStorageClaimResponse(rsp)
}

// CreateSessionWithBodyWithResponse request with arbitrary body returning *CreateSessionResponse
func (c *ClientWithResponses) CreateSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSessionResponse, error) {
	rsp, err := c.CreateSessionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSessionResponse(rsp)
}

func (c *ClientWithResponses) CreateSessionWithResponse(ctx context.Context, body CreateSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSessionResponse, error) {
	rsp, err := c.CreateSession(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSessionResponse(rsp)
}

// GetSegmentsByOrderIDWithResponse request returning *GetSegmentsByOrderIDResponse
func (c *ClientWithResponses) GetSegmentsByOrderIDWithResponse(ctx context.Context, orderID OrderIDParam, reqEditors ...RequestEditorFn) (*GetSegmentsByOrderIDResponse, error) {
	rsp, err := c.GetSegmentsByOrderID(ctx, orderID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSegmentsByOrderIDResponse(rsp)
}

// ParseAllocateAuthorityResponse parses an HTTP response from a AllocateAuthorityWithResponse call
func ParseAllocateAuthorityResponse(rsp *http.Response) (*AllocateAuthorityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AllocateAuthorityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Authority
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetQueuedSegmentsCountResponse parses an HTTP response from a GetQueuedSegmentsCountWithResponse call
func ParseGetQueuedSegmentsCountResponse(rsp *http.Response) (*GetQueuedSegmentsCountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetQueuedSegmentsCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Count
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseSearchSegmentsResponse parses an HTTP response from a SearchSegmentsWithResponse call
func ParseSearchSegmentsResponse(rsp *http.Response) (*SearchSegmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SearchSegmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ConvertSegment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseAllocateSegmentResponse parses an HTTP response from a AllocateSegmentWithResponse call
func ParseAllocateSegmentResponse(rsp *http.Response) (*AllocateSegmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AllocateSegmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConvertSegment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseFindFreeSegmentResponse parses an HTTP response from a FindFreeSegmentWithResponse call
func ParseFindFreeSegmentResponse(rsp *http.Response) (*FindFreeSegmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &FindFreeSegmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConvertSegment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSegmentByIDResponse parses an HTTP response from a GetSegmentByIDWithResponse call
func ParseGetSegmentByIDResponse(rsp *http.Response) (*GetSegmentByIDResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSegmentByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConvertSegment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAcceptSegmentResponse parses an HTTP response from a AcceptSegmentWithResponse call
func ParseAcceptSegmentResponse(rsp *http.Response) (*AcceptSegmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AcceptSegmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCancelSegmentResponse parses an HTTP response from a CancelSegmentWithResponse call
func ParseCancelSegmentResponse(rsp *http.Response) (*CancelSegmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CancelSegmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseFailSegmentResponse parses an HTTP response from a FailSegmentWithResponse call
func ParseFailSegmentResponse(rsp *http.Response) (*FailSegmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &FailSegmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseFinishSegmentResponse parses an HTTP response from a FinishSegmentWithResponse call
func ParseFinishSegmentResponse(rsp *http.Response) (*FinishSegmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &FinishSegmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePublishSegmentResponse parses an HTTP response from a PublishSegmentWithResponse call
func ParsePublishSegmentResponse(rsp *http.Response) (*PublishSegmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PublishSegmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseQuitSegmentResponse parses an HTTP response from a QuitSegmentWithResponse call
func ParseQuitSegmentResponse(rsp *http.Response) (*QuitSegmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &QuitSegmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRepublishSegmentResponse parses an HTTP response from a RepublishSegmentWithResponse call
func ParseRepublishSegmentResponse(rsp *http.Response) (*RepublishSegmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RepublishSegmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetInputStorageClaimResponse parses an HTTP response from a GetInputStorageClaimWithResponse call
func ParseGetInputStorageClaimResponse(rsp *http.Response) (*GetInputStorageClaimResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetInputStorageClaimResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StorageClaim
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAllocateInputStorageClaimResponse parses an HTTP response from a AllocateInputStorageClaimWithResponse call
func ParseAllocateInputStorageClaimResponse(rsp *http.Response) (*AllocateInputStorageClaimResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AllocateInputStorageClaimResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StorageClaim
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNotifyProcessResponse parses an HTTP response from a NotifyProcessWithResponse call
func ParseNotifyProcessResponse(rsp *http.Response) (*NotifyProcessResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NotifyProcessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOutputStorageClaimResponse parses an HTTP response from a GetOutputStorageClaimWithResponse call
func ParseGetOutputStorageClaimResponse(rsp *http.Response) (*GetOutputStorageClaimResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOutputStorageClaimResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StorageClaim
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAllocateOutputStorageClaimResponse parses an HTTP response from a AllocateOutputStorageClaimWithResponse call
func ParseAllocateOutputStorageClaimResponse(rsp *http.Response) (*AllocateOutputStorageClaimResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AllocateOutputStorageClaimResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StorageClaim
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateSessionResponse parses an HTTP response from a CreateSessionWithResponse call
func ParseCreateSessionResponse(rsp *http.Response) (*CreateSessionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Session
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSegmentsByOrderIDResponse parses an HTTP response from a GetSegmentsByOrderIDWithResponse call
func ParseGetSegmentsByOrderIDResponse(rsp *http.Response) (*GetSegmentsByOrderIDResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSegmentsByOrderIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ConvertSegment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /authorities)
	AllocateAuthority(ctx echo.Context) error

	// (GET /queued_segments_count)
	GetQueuedSegmentsCount(ctx echo.Context) error

	// (GET /segments)
	SearchSegments(ctx echo.Context) error

	// (POST /segments)
	AllocateSegment(ctx echo.Context) error

	// (POST /segments/free)
	FindFreeSegment(ctx echo.Context) error

	// (GET /segments/{segmentID})
	GetSegmentByID(ctx echo.Context, segmentID SegmentIDParam) error

	// (POST /segments/{segmentID}/actions/accept)
	AcceptSegment(ctx echo.Context, segmentID SegmentIDParam) error

	// (POST /segments/{segmentID}/actions/cancel)
	CancelSegment(ctx echo.Context, segmentID SegmentIDParam) error

	// (POST /segments/{segmentID}/actions/fail)
	FailSegment(ctx echo.Context, segmentID SegmentIDParam) error

	// (POST /segments/{segmentID}/actions/finish)
	FinishSegment(ctx echo.Context, segmentID SegmentIDParam) error

	// (POST /segments/{segmentID}/actions/publish)
	PublishSegment(ctx echo.Context, segmentID SegmentIDParam) error

	// (POST /segments/{segmentID}/actions/quit)
	QuitSegment(ctx echo.Context, segmentID SegmentIDParam) error

	// (POST /segments/{segmentID}/actions/republish)
	RepublishSegment(ctx echo.Context, segmentID SegmentIDParam) error

	// (GET /segments/{segmentID}/input-storage-claim)
	GetInputStorageClaim(ctx echo.Context, segmentID SegmentIDParam) error

	// (POST /segments/{segmentID}/input-storage-claim)
	AllocateInputStorageClaim(ctx echo.Context, segmentID SegmentIDParam) error

	// (POST /segments/{segmentID}/notifications/process)
	NotifyProcess(ctx echo.Context, segmentID SegmentIDParam) error

	// (GET /segments/{segmentID}/output-storage-claim)
	GetOutputStorageClaim(ctx echo.Context, segmentID SegmentIDParam) error

	// (POST /segments/{segmentID}/output-storage-claim)
	AllocateOutputStorageClaim(ctx echo.Context, segmentID SegmentIDParam) error

	// (POST /sessions)
	CreateSession(ctx echo.Context) error

	// (GET /{orderID}/segments)
	GetSegmentsByOrderID(ctx echo.Context, orderID OrderIDParam) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AllocateAuthority converts echo context to params.
func (w *ServerInterfaceWrapper) AllocateAuthority(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AllocateAuthority(ctx)
	return err
}

// GetQueuedSegmentsCount converts echo context to params.
func (w *ServerInterfaceWrapper) GetQueuedSegmentsCount(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetQueuedSegmentsCount(ctx)
	return err
}

// SearchSegments converts echo context to params.
func (w *ServerInterfaceWrapper) SearchSegments(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchSegments(ctx)
	return err
}

// AllocateSegment converts echo context to params.
func (w *ServerInterfaceWrapper) AllocateSegment(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AllocateSegment(ctx)
	return err
}

// FindFreeSegment converts echo context to params.
func (w *ServerInterfaceWrapper) FindFreeSegment(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindFreeSegment(ctx)
	return err
}

// GetSegmentByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetSegmentByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "segmentID" -------------
	var segmentID SegmentIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "segmentID", runtime.ParamLocationPath, ctx.Param("segmentID"), &segmentID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter segmentID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSegmentByID(ctx, segmentID)
	return err
}

// AcceptSegment converts echo context to params.
func (w *ServerInterfaceWrapper) AcceptSegment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "segmentID" -------------
	var segmentID SegmentIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "segmentID", runtime.ParamLocationPath, ctx.Param("segmentID"), &segmentID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter segmentID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AcceptSegment(ctx, segmentID)
	return err
}

// CancelSegment converts echo context to params.
func (w *ServerInterfaceWrapper) CancelSegment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "segmentID" -------------
	var segmentID SegmentIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "segmentID", runtime.ParamLocationPath, ctx.Param("segmentID"), &segmentID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter segmentID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CancelSegment(ctx, segmentID)
	return err
}

// FailSegment converts echo context to params.
func (w *ServerInterfaceWrapper) FailSegment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "segmentID" -------------
	var segmentID SegmentIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "segmentID", runtime.ParamLocationPath, ctx.Param("segmentID"), &segmentID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter segmentID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FailSegment(ctx, segmentID)
	return err
}

// FinishSegment converts echo context to params.
func (w *ServerInterfaceWrapper) FinishSegment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "segmentID" -------------
	var segmentID SegmentIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "segmentID", runtime.ParamLocationPath, ctx.Param("segmentID"), &segmentID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter segmentID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FinishSegment(ctx, segmentID)
	return err
}

// PublishSegment converts echo context to params.
func (w *ServerInterfaceWrapper) PublishSegment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "segmentID" -------------
	var segmentID SegmentIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "segmentID", runtime.ParamLocationPath, ctx.Param("segmentID"), &segmentID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter segmentID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PublishSegment(ctx, segmentID)
	return err
}

// QuitSegment converts echo context to params.
func (w *ServerInterfaceWrapper) QuitSegment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "segmentID" -------------
	var segmentID SegmentIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "segmentID", runtime.ParamLocationPath, ctx.Param("segmentID"), &segmentID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter segmentID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QuitSegment(ctx, segmentID)
	return err
}

// RepublishSegment converts echo context to params.
func (w *ServerInterfaceWrapper) RepublishSegment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "segmentID" -------------
	var segmentID SegmentIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "segmentID", runtime.ParamLocationPath, ctx.Param("segmentID"), &segmentID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter segmentID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RepublishSegment(ctx, segmentID)
	return err
}

// GetInputStorageClaim converts echo context to params.
func (w *ServerInterfaceWrapper) GetInputStorageClaim(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "segmentID" -------------
	var segmentID SegmentIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "segmentID", runtime.ParamLocationPath, ctx.Param("segmentID"), &segmentID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter segmentID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInputStorageClaim(ctx, segmentID)
	return err
}

// AllocateInputStorageClaim converts echo context to params.
func (w *ServerInterfaceWrapper) AllocateInputStorageClaim(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "segmentID" -------------
	var segmentID SegmentIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "segmentID", runtime.ParamLocationPath, ctx.Param("segmentID"), &segmentID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter segmentID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AllocateInputStorageClaim(ctx, segmentID)
	return err
}

// NotifyProcess converts echo context to params.
func (w *ServerInterfaceWrapper) NotifyProcess(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "segmentID" -------------
	var segmentID SegmentIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "segmentID", runtime.ParamLocationPath, ctx.Param("segmentID"), &segmentID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter segmentID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NotifyProcess(ctx, segmentID)
	return err
}

// GetOutputStorageClaim converts echo context to params.
func (w *ServerInterfaceWrapper) GetOutputStorageClaim(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "segmentID" -------------
	var segmentID SegmentIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "segmentID", runtime.ParamLocationPath, ctx.Param("segmentID"), &segmentID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter segmentID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOutputStorageClaim(ctx, segmentID)
	return err
}

// AllocateOutputStorageClaim converts echo context to params.
func (w *ServerInterfaceWrapper) AllocateOutputStorageClaim(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "segmentID" -------------
	var segmentID SegmentIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "segmentID", runtime.ParamLocationPath, ctx.Param("segmentID"), &segmentID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter segmentID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AllocateOutputStorageClaim(ctx, segmentID)
	return err
}

// CreateSession converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSession(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSession(ctx)
	return err
}

// GetSegmentsByOrderID converts echo context to params.
func (w *ServerInterfaceWrapper) GetSegmentsByOrderID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orderID" -------------
	var orderID OrderIDParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "orderID", runtime.ParamLocationPath, ctx.Param("orderID"), &orderID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSegmentsByOrderID(ctx, orderID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/authorities", wrapper.AllocateAuthority)
	router.GET(baseURL+"/queued_segments_count", wrapper.GetQueuedSegmentsCount)
	router.GET(baseURL+"/segments", wrapper.SearchSegments)
	router.POST(baseURL+"/segments", wrapper.AllocateSegment)
	router.POST(baseURL+"/segments/free", wrapper.FindFreeSegment)
	router.GET(baseURL+"/segments/:segmentID", wrapper.GetSegmentByID)
	router.POST(baseURL+"/segments/:segmentID/actions/accept", wrapper.AcceptSegment)
	router.POST(baseURL+"/segments/:segmentID/actions/cancel", wrapper.CancelSegment)
	router.POST(baseURL+"/segments/:segmentID/actions/fail", wrapper.FailSegment)
	router.POST(baseURL+"/segments/:segmentID/actions/finish", wrapper.FinishSegment)
	router.POST(baseURL+"/segments/:segmentID/actions/publish", wrapper.PublishSegment)
	router.POST(baseURL+"/segments/:segmentID/actions/quit", wrapper.QuitSegment)
	router.POST(baseURL+"/segments/:segmentID/actions/republish", wrapper.RepublishSegment)
	router.GET(baseURL+"/segments/:segmentID/input-storage-claim", wrapper.GetInputStorageClaim)
	router.POST(baseURL+"/segments/:segmentID/input-storage-claim", wrapper.AllocateInputStorageClaim)
	router.POST(baseURL+"/segments/:segmentID/notifications/process", wrapper.NotifyProcess)
	router.GET(baseURL+"/segments/:segmentID/output-storage-claim", wrapper.GetOutputStorageClaim)
	router.POST(baseURL+"/segments/:segmentID/output-storage-claim", wrapper.AllocateOutputStorageClaim)
	router.POST(baseURL+"/sessions", wrapper.CreateSession)
	router.GET(baseURL+"/:orderID/segments", wrapper.GetSegmentsByOrderID)

}
