// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/distributed/models/interfaces.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	chwg "github.com/wailorman/fftb/pkg/chwg"
	models "github.com/wailorman/fftb/pkg/distributed/models"
	files "github.com/wailorman/fftb/pkg/files"
)

// MockIContracterRequest is a mock of IContracterRequest interface.
type MockIContracterRequest struct {
	ctrl     *gomock.Controller
	recorder *MockIContracterRequestMockRecorder
}

// MockIContracterRequestMockRecorder is the mock recorder for MockIContracterRequest.
type MockIContracterRequestMockRecorder struct {
	mock *MockIContracterRequest
}

// NewMockIContracterRequest creates a new mock instance.
func NewMockIContracterRequest(ctrl *gomock.Controller) *MockIContracterRequest {
	mock := &MockIContracterRequest{ctrl: ctrl}
	mock.recorder = &MockIContracterRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIContracterRequest) EXPECT() *MockIContracterRequestMockRecorder {
	return m.recorder
}

// GetType mocks base method.
func (m *MockIContracterRequest) GetType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockIContracterRequestMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockIContracterRequest)(nil).GetType))
}

// Validate mocks base method.
func (m *MockIContracterRequest) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockIContracterRequestMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockIContracterRequest)(nil).Validate))
}

// MockIDealerRequest is a mock of IDealerRequest interface.
type MockIDealerRequest struct {
	ctrl     *gomock.Controller
	recorder *MockIDealerRequestMockRecorder
}

// MockIDealerRequestMockRecorder is the mock recorder for MockIDealerRequest.
type MockIDealerRequestMockRecorder struct {
	mock *MockIDealerRequest
}

// NewMockIDealerRequest creates a new mock instance.
func NewMockIDealerRequest(ctrl *gomock.Controller) *MockIDealerRequest {
	mock := &MockIDealerRequest{ctrl: ctrl}
	mock.recorder = &MockIDealerRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDealerRequest) EXPECT() *MockIDealerRequestMockRecorder {
	return m.recorder
}

// GetID mocks base method.
func (m *MockIDealerRequest) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockIDealerRequestMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockIDealerRequest)(nil).GetID))
}

// GetType mocks base method.
func (m *MockIDealerRequest) GetType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockIDealerRequestMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockIDealerRequest)(nil).GetType))
}

// Validate mocks base method.
func (m *MockIDealerRequest) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockIDealerRequestMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockIDealerRequest)(nil).Validate))
}

// MockIOrder is a mock of IOrder interface.
type MockIOrder struct {
	ctrl     *gomock.Controller
	recorder *MockIOrderMockRecorder
}

// MockIOrderMockRecorder is the mock recorder for MockIOrder.
type MockIOrderMockRecorder struct {
	mock *MockIOrder
}

// NewMockIOrder creates a new mock instance.
func NewMockIOrder(ctrl *gomock.Controller) *MockIOrder {
	mock := &MockIOrder{ctrl: ctrl}
	mock.recorder = &MockIOrderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOrder) EXPECT() *MockIOrderMockRecorder {
	return m.recorder
}

// CalculateProgress mocks base method.
func (m *MockIOrder) CalculateProgress(arg0 []models.ISegment) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateProgress", arg0)
	ret0, _ := ret[0].(float64)
	return ret0
}

// CalculateProgress indicates an expected call of CalculateProgress.
func (mr *MockIOrderMockRecorder) CalculateProgress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateProgress", reflect.TypeOf((*MockIOrder)(nil).CalculateProgress), arg0)
}

// GetCanConcat mocks base method.
func (m *MockIOrder) GetCanConcat(segments []models.ISegment) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCanConcat", segments)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetCanConcat indicates an expected call of GetCanConcat.
func (mr *MockIOrderMockRecorder) GetCanConcat(segments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCanConcat", reflect.TypeOf((*MockIOrder)(nil).GetCanConcat), segments)
}

// GetCanPublish mocks base method.
func (m *MockIOrder) GetCanPublish() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCanPublish")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetCanPublish indicates an expected call of GetCanPublish.
func (mr *MockIOrderMockRecorder) GetCanPublish() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCanPublish", reflect.TypeOf((*MockIOrder)(nil).GetCanPublish))
}

// GetCanRetry mocks base method.
func (m *MockIOrder) GetCanRetry() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCanRetry")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetCanRetry indicates an expected call of GetCanRetry.
func (mr *MockIOrderMockRecorder) GetCanRetry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCanRetry", reflect.TypeOf((*MockIOrder)(nil).GetCanRetry))
}

// GetID mocks base method.
func (m *MockIOrder) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockIOrderMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockIOrder)(nil).GetID))
}

// GetInputFile mocks base method.
func (m *MockIOrder) GetInputFile() files.Filer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInputFile")
	ret0, _ := ret[0].(files.Filer)
	return ret0
}

// GetInputFile indicates an expected call of GetInputFile.
func (mr *MockIOrderMockRecorder) GetInputFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInputFile", reflect.TypeOf((*MockIOrder)(nil).GetInputFile))
}

// GetOutputFile mocks base method.
func (m *MockIOrder) GetOutputFile() files.Filer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutputFile")
	ret0, _ := ret[0].(files.Filer)
	return ret0
}

// GetOutputFile indicates an expected call of GetOutputFile.
func (mr *MockIOrderMockRecorder) GetOutputFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutputFile", reflect.TypeOf((*MockIOrder)(nil).GetOutputFile))
}

// GetPublisher mocks base method.
func (m *MockIOrder) GetPublisher() models.IAuthor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublisher")
	ret0, _ := ret[0].(models.IAuthor)
	return ret0
}

// GetPublisher indicates an expected call of GetPublisher.
func (mr *MockIOrderMockRecorder) GetPublisher() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublisher", reflect.TypeOf((*MockIOrder)(nil).GetPublisher))
}

// GetRetriesCount mocks base method.
func (m *MockIOrder) GetRetriesCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRetriesCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetRetriesCount indicates an expected call of GetRetriesCount.
func (mr *MockIOrderMockRecorder) GetRetriesCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRetriesCount", reflect.TypeOf((*MockIOrder)(nil).GetRetriesCount))
}

// GetRetryAt mocks base method.
func (m *MockIOrder) GetRetryAt() *time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRetryAt")
	ret0, _ := ret[0].(*time.Time)
	return ret0
}

// GetRetryAt indicates an expected call of GetRetryAt.
func (mr *MockIOrderMockRecorder) GetRetryAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRetryAt", reflect.TypeOf((*MockIOrder)(nil).GetRetryAt))
}

// GetState mocks base method.
func (m *MockIOrder) GetState() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockIOrderMockRecorder) GetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockIOrder)(nil).GetState))
}

// GetType mocks base method.
func (m *MockIOrder) GetType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockIOrderMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockIOrder)(nil).GetType))
}

// MatchPublisher mocks base method.
func (m *MockIOrder) MatchPublisher(arg0 models.IAuthor) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchPublisher", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// MatchPublisher indicates an expected call of MatchPublisher.
func (mr *MockIOrderMockRecorder) MatchPublisher(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchPublisher", reflect.TypeOf((*MockIOrder)(nil).MatchPublisher), arg0)
}

// Validate mocks base method.
func (m *MockIOrder) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockIOrderMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockIOrder)(nil).Validate))
}

// cancel mocks base method.
func (m *MockIOrder) cancel(reason string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "cancel", reason)
}

// cancel indicates an expected call of cancel.
func (mr *MockIOrderMockRecorder) cancel(reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "cancel", reflect.TypeOf((*MockIOrder)(nil).cancel), reason)
}

// incrementRetriesCount mocks base method.
func (m *MockIOrder) incrementRetriesCount() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "incrementRetriesCount")
}

// incrementRetriesCount indicates an expected call of incrementRetriesCount.
func (mr *MockIOrderMockRecorder) incrementRetriesCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "incrementRetriesCount", reflect.TypeOf((*MockIOrder)(nil).incrementRetriesCount))
}

// setLastError mocks base method.
func (m *MockIOrder) setLastError(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setLastError", err)
}

// setLastError indicates an expected call of setLastError.
func (mr *MockIOrderMockRecorder) setLastError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setLastError", reflect.TypeOf((*MockIOrder)(nil).setLastError), err)
}

// MockSegmentCanceller is a mock of SegmentCanceller interface.
type MockSegmentCanceller struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentCancellerMockRecorder
}

// MockSegmentCancellerMockRecorder is the mock recorder for MockSegmentCanceller.
type MockSegmentCancellerMockRecorder struct {
	mock *MockSegmentCanceller
}

// NewMockSegmentCanceller creates a new mock instance.
func NewMockSegmentCanceller(ctrl *gomock.Controller) *MockSegmentCanceller {
	mock := &MockSegmentCanceller{ctrl: ctrl}
	mock.recorder = &MockSegmentCancellerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegmentCanceller) EXPECT() *MockSegmentCancellerMockRecorder {
	return m.recorder
}

// CancelSegment mocks base method.
func (m *MockSegmentCanceller) CancelSegment(segment models.ISegment, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelSegment", segment, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelSegment indicates an expected call of CancelSegment.
func (mr *MockSegmentCancellerMockRecorder) CancelSegment(segment, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSegment", reflect.TypeOf((*MockSegmentCanceller)(nil).CancelSegment), segment, reason)
}

// MockIOrderMutator is a mock of IOrderMutator interface.
type MockIOrderMutator struct {
	ctrl     *gomock.Controller
	recorder *MockIOrderMutatorMockRecorder
}

// MockIOrderMutatorMockRecorder is the mock recorder for MockIOrderMutator.
type MockIOrderMutatorMockRecorder struct {
	mock *MockIOrderMutator
}

// NewMockIOrderMutator creates a new mock instance.
func NewMockIOrderMutator(ctrl *gomock.Controller) *MockIOrderMutator {
	mock := &MockIOrderMutator{ctrl: ctrl}
	mock.recorder = &MockIOrderMutatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOrderMutator) EXPECT() *MockIOrderMutatorMockRecorder {
	return m.recorder
}

// CancelOrder mocks base method.
func (m *MockIOrderMutator) CancelOrder(segmentMutator models.SegmentCanceller, order models.IOrder, segments []models.ISegment, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", segmentMutator, order, segments, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockIOrderMutatorMockRecorder) CancelOrder(segmentMutator, order, segments, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockIOrderMutator)(nil).CancelOrder), segmentMutator, order, segments, reason)
}

// FailOrder mocks base method.
func (m *MockIOrderMutator) FailOrder(segmentMutator models.SegmentCanceller, order models.IOrder, segments []models.ISegment, err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FailOrder", segmentMutator, order, segments, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// FailOrder indicates an expected call of FailOrder.
func (mr *MockIOrderMutatorMockRecorder) FailOrder(segmentMutator, order, segments, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailOrder", reflect.TypeOf((*MockIOrderMutator)(nil).FailOrder), segmentMutator, order, segments, err)
}

// MockISegment is a mock of ISegment interface.
type MockISegment struct {
	ctrl     *gomock.Controller
	recorder *MockISegmentMockRecorder
}

// MockISegmentMockRecorder is the mock recorder for MockISegment.
type MockISegmentMockRecorder struct {
	mock *MockISegment
}

// NewMockISegment creates a new mock instance.
func NewMockISegment(ctrl *gomock.Controller) *MockISegment {
	mock := &MockISegment{ctrl: ctrl}
	mock.recorder = &MockISegmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISegment) EXPECT() *MockISegmentMockRecorder {
	return m.recorder
}

// GetCanPerform mocks base method.
func (m *MockISegment) GetCanPerform() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCanPerform")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetCanPerform indicates an expected call of GetCanPerform.
func (mr *MockISegmentMockRecorder) GetCanPerform() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCanPerform", reflect.TypeOf((*MockISegment)(nil).GetCanPerform))
}

// GetCanRetry mocks base method.
func (m *MockISegment) GetCanRetry() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCanRetry")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetCanRetry indicates an expected call of GetCanRetry.
func (mr *MockISegmentMockRecorder) GetCanRetry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCanRetry", reflect.TypeOf((*MockISegment)(nil).GetCanRetry))
}

// GetCurrentState mocks base method.
func (m *MockISegment) GetCurrentState() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentState")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCurrentState indicates an expected call of GetCurrentState.
func (mr *MockISegmentMockRecorder) GetCurrentState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentState", reflect.TypeOf((*MockISegment)(nil).GetCurrentState))
}

// GetID mocks base method.
func (m *MockISegment) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockISegmentMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockISegment)(nil).GetID))
}

// GetInputStorageClaimIdentity mocks base method.
func (m *MockISegment) GetInputStorageClaimIdentity() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInputStorageClaimIdentity")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetInputStorageClaimIdentity indicates an expected call of GetInputStorageClaimIdentity.
func (mr *MockISegmentMockRecorder) GetInputStorageClaimIdentity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInputStorageClaimIdentity", reflect.TypeOf((*MockISegment)(nil).GetInputStorageClaimIdentity))
}

// GetIsLocked mocks base method.
func (m *MockISegment) GetIsLocked() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIsLocked")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetIsLocked indicates an expected call of GetIsLocked.
func (mr *MockISegmentMockRecorder) GetIsLocked() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIsLocked", reflect.TypeOf((*MockISegment)(nil).GetIsLocked))
}

// GetLockedBy mocks base method.
func (m *MockISegment) GetLockedBy() models.IAuthor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLockedBy")
	ret0, _ := ret[0].(models.IAuthor)
	return ret0
}

// GetLockedBy indicates an expected call of GetLockedBy.
func (mr *MockISegmentMockRecorder) GetLockedBy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLockedBy", reflect.TypeOf((*MockISegment)(nil).GetLockedBy))
}

// GetLockedUntil mocks base method.
func (m *MockISegment) GetLockedUntil() *time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLockedUntil")
	ret0, _ := ret[0].(*time.Time)
	return ret0
}

// GetLockedUntil indicates an expected call of GetLockedUntil.
func (mr *MockISegmentMockRecorder) GetLockedUntil() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLockedUntil", reflect.TypeOf((*MockISegment)(nil).GetLockedUntil))
}

// GetOrderID mocks base method.
func (m *MockISegment) GetOrderID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetOrderID indicates an expected call of GetOrderID.
func (mr *MockISegmentMockRecorder) GetOrderID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderID", reflect.TypeOf((*MockISegment)(nil).GetOrderID))
}

// GetOutputStorageClaimIdentity mocks base method.
func (m *MockISegment) GetOutputStorageClaimIdentity() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutputStorageClaimIdentity")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetOutputStorageClaimIdentity indicates an expected call of GetOutputStorageClaimIdentity.
func (mr *MockISegmentMockRecorder) GetOutputStorageClaimIdentity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutputStorageClaimIdentity", reflect.TypeOf((*MockISegment)(nil).GetOutputStorageClaimIdentity))
}

// GetPerformer mocks base method.
func (m *MockISegment) GetPerformer() models.IAuthor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPerformer")
	ret0, _ := ret[0].(models.IAuthor)
	return ret0
}

// GetPerformer indicates an expected call of GetPerformer.
func (mr *MockISegmentMockRecorder) GetPerformer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPerformer", reflect.TypeOf((*MockISegment)(nil).GetPerformer))
}

// GetPosition mocks base method.
func (m *MockISegment) GetPosition() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosition")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetPosition indicates an expected call of GetPosition.
func (mr *MockISegmentMockRecorder) GetPosition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosition", reflect.TypeOf((*MockISegment)(nil).GetPosition))
}

// GetPublisher mocks base method.
func (m *MockISegment) GetPublisher() models.IAuthor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublisher")
	ret0, _ := ret[0].(models.IAuthor)
	return ret0
}

// GetPublisher indicates an expected call of GetPublisher.
func (mr *MockISegmentMockRecorder) GetPublisher() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublisher", reflect.TypeOf((*MockISegment)(nil).GetPublisher))
}

// GetRetriesCount mocks base method.
func (m *MockISegment) GetRetriesCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRetriesCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetRetriesCount indicates an expected call of GetRetriesCount.
func (mr *MockISegmentMockRecorder) GetRetriesCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRetriesCount", reflect.TypeOf((*MockISegment)(nil).GetRetriesCount))
}

// GetRetryAt mocks base method.
func (m *MockISegment) GetRetryAt() *time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRetryAt")
	ret0, _ := ret[0].(*time.Time)
	return ret0
}

// GetRetryAt indicates an expected call of GetRetryAt.
func (mr *MockISegmentMockRecorder) GetRetryAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRetryAt", reflect.TypeOf((*MockISegment)(nil).GetRetryAt))
}

// GetState mocks base method.
func (m *MockISegment) GetState() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockISegmentMockRecorder) GetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockISegment)(nil).GetState))
}

// GetType mocks base method.
func (m *MockISegment) GetType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockISegmentMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockISegment)(nil).GetType))
}

// MatchPerformer mocks base method.
func (m *MockISegment) MatchPerformer(arg0 models.IAuthor) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchPerformer", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// MatchPerformer indicates an expected call of MatchPerformer.
func (mr *MockISegmentMockRecorder) MatchPerformer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchPerformer", reflect.TypeOf((*MockISegment)(nil).MatchPerformer), arg0)
}

// MatchPublisher mocks base method.
func (m *MockISegment) MatchPublisher(arg0 models.IAuthor) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchPublisher", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// MatchPublisher indicates an expected call of MatchPublisher.
func (mr *MockISegmentMockRecorder) MatchPublisher(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchPublisher", reflect.TypeOf((*MockISegment)(nil).MatchPublisher), arg0)
}

// Validate mocks base method.
func (m *MockISegment) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockISegmentMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockISegment)(nil).Validate))
}

// cancel mocks base method.
func (m *MockISegment) cancel(reason string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "cancel", reason)
}

// cancel indicates an expected call of cancel.
func (mr *MockISegmentMockRecorder) cancel(reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "cancel", reflect.TypeOf((*MockISegment)(nil).cancel), reason)
}

// finish mocks base method.
func (m *MockISegment) finish() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "finish")
}

// finish indicates an expected call of finish.
func (mr *MockISegmentMockRecorder) finish() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "finish", reflect.TypeOf((*MockISegment)(nil).finish))
}

// incrementRetriesCount mocks base method.
func (m *MockISegment) incrementRetriesCount() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "incrementRetriesCount")
}

// incrementRetriesCount indicates an expected call of incrementRetriesCount.
func (mr *MockISegmentMockRecorder) incrementRetriesCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "incrementRetriesCount", reflect.TypeOf((*MockISegment)(nil).incrementRetriesCount))
}

// lock mocks base method.
func (m *MockISegment) lock(performer models.IAuthor) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "lock", performer)
}

// lock indicates an expected call of lock.
func (mr *MockISegmentMockRecorder) lock(performer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "lock", reflect.TypeOf((*MockISegment)(nil).lock), performer)
}

// publish mocks base method.
func (m *MockISegment) publish() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "publish")
}

// publish indicates an expected call of publish.
func (mr *MockISegmentMockRecorder) publish() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "publish", reflect.TypeOf((*MockISegment)(nil).publish))
}

// setLastError mocks base method.
func (m *MockISegment) setLastError(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setLastError", err)
}

// setLastError indicates an expected call of setLastError.
func (mr *MockISegmentMockRecorder) setLastError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setLastError", reflect.TypeOf((*MockISegment)(nil).setLastError), err)
}

// unlock mocks base method.
func (m *MockISegment) unlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "unlock")
}

// unlock indicates an expected call of unlock.
func (mr *MockISegmentMockRecorder) unlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "unlock", reflect.TypeOf((*MockISegment)(nil).unlock))
}

// MockISegmentMutator is a mock of ISegmentMutator interface.
type MockISegmentMutator struct {
	ctrl     *gomock.Controller
	recorder *MockISegmentMutatorMockRecorder
}

// MockISegmentMutatorMockRecorder is the mock recorder for MockISegmentMutator.
type MockISegmentMutatorMockRecorder struct {
	mock *MockISegmentMutator
}

// NewMockISegmentMutator creates a new mock instance.
func NewMockISegmentMutator(ctrl *gomock.Controller) *MockISegmentMutator {
	mock := &MockISegmentMutator{ctrl: ctrl}
	mock.recorder = &MockISegmentMutatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISegmentMutator) EXPECT() *MockISegmentMutatorMockRecorder {
	return m.recorder
}

// CancelSegment mocks base method.
func (m *MockISegmentMutator) CancelSegment(segment models.ISegment, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelSegment", segment, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelSegment indicates an expected call of CancelSegment.
func (mr *MockISegmentMutatorMockRecorder) CancelSegment(segment, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSegment", reflect.TypeOf((*MockISegmentMutator)(nil).CancelSegment), segment, reason)
}

// FailSegment mocks base method.
func (m *MockISegmentMutator) FailSegment(segment models.ISegment, err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FailSegment", segment, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// FailSegment indicates an expected call of FailSegment.
func (mr *MockISegmentMutatorMockRecorder) FailSegment(segment, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailSegment", reflect.TypeOf((*MockISegmentMutator)(nil).FailSegment), segment, err)
}

// FinishSegment mocks base method.
func (m *MockISegmentMutator) FinishSegment(segment models.ISegment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishSegment", segment)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinishSegment indicates an expected call of FinishSegment.
func (mr *MockISegmentMutatorMockRecorder) FinishSegment(segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishSegment", reflect.TypeOf((*MockISegmentMutator)(nil).FinishSegment), segment)
}

// LockSegment mocks base method.
func (m *MockISegmentMutator) LockSegment(segment models.ISegment, performer models.IAuthor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockSegment", segment, performer)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockSegment indicates an expected call of LockSegment.
func (mr *MockISegmentMutatorMockRecorder) LockSegment(segment, performer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockSegment", reflect.TypeOf((*MockISegmentMutator)(nil).LockSegment), segment, performer)
}

// PublishSegment mocks base method.
func (m *MockISegmentMutator) PublishSegment(segment models.ISegment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishSegment", segment)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishSegment indicates an expected call of PublishSegment.
func (mr *MockISegmentMutatorMockRecorder) PublishSegment(segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishSegment", reflect.TypeOf((*MockISegmentMutator)(nil).PublishSegment), segment)
}

// UnlockSegment mocks base method.
func (m *MockISegmentMutator) UnlockSegment(segment models.ISegment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockSegment", segment)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlockSegment indicates an expected call of UnlockSegment.
func (mr *MockISegmentMutatorMockRecorder) UnlockSegment(segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockSegment", reflect.TypeOf((*MockISegmentMutator)(nil).UnlockSegment), segment)
}

// MockIContracter is a mock of IContracter interface.
type MockIContracter struct {
	ctrl     *gomock.Controller
	recorder *MockIContracterMockRecorder
}

// MockIContracterMockRecorder is the mock recorder for MockIContracter.
type MockIContracterMockRecorder struct {
	mock *MockIContracter
}

// NewMockIContracter creates a new mock instance.
func NewMockIContracter(ctrl *gomock.Controller) *MockIContracter {
	mock := &MockIContracter{ctrl: ctrl}
	mock.recorder = &MockIContracterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIContracter) EXPECT() *MockIContracterMockRecorder {
	return m.recorder
}

// CancelOrderByID mocks base method.
func (m *MockIContracter) CancelOrderByID(ctx context.Context, orderID, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrderByID", ctx, orderID, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelOrderByID indicates an expected call of CancelOrderByID.
func (mr *MockIContracterMockRecorder) CancelOrderByID(ctx, orderID, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrderByID", reflect.TypeOf((*MockIContracter)(nil).CancelOrderByID), ctx, orderID, reason)
}

// GetAllOrders mocks base method.
func (m *MockIContracter) GetAllOrders(ctx context.Context) ([]models.IOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrders", ctx)
	ret0, _ := ret[0].([]models.IOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrders indicates an expected call of GetAllOrders.
func (mr *MockIContracterMockRecorder) GetAllOrders(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrders", reflect.TypeOf((*MockIContracter)(nil).GetAllOrders), ctx)
}

// GetOrderByID mocks base method.
func (m *MockIContracter) GetOrderByID(ctx context.Context, id string) (models.IOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", ctx, id)
	ret0, _ := ret[0].(models.IOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockIContracterMockRecorder) GetOrderByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockIContracter)(nil).GetOrderByID), ctx, id)
}

// SearchAllOrders mocks base method.
func (m *MockIContracter) SearchAllOrders(ctx context.Context, search models.IOrderSearchCriteria) ([]models.IOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAllOrders", ctx, search)
	ret0, _ := ret[0].([]models.IOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAllOrders indicates an expected call of SearchAllOrders.
func (mr *MockIContracterMockRecorder) SearchAllOrders(ctx, search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAllOrders", reflect.TypeOf((*MockIContracter)(nil).SearchAllOrders), ctx, search)
}

// MockIDealer is a mock of IDealer interface.
type MockIDealer struct {
	ctrl     *gomock.Controller
	recorder *MockIDealerMockRecorder
}

// MockIDealerMockRecorder is the mock recorder for MockIDealer.
type MockIDealerMockRecorder struct {
	mock *MockIDealer
}

// NewMockIDealer creates a new mock instance.
func NewMockIDealer(ctrl *gomock.Controller) *MockIDealer {
	mock := &MockIDealer{ctrl: ctrl}
	mock.recorder = &MockIDealerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDealer) EXPECT() *MockIDealerMockRecorder {
	return m.recorder
}

// AcceptSegment mocks base method.
func (m *MockIDealer) AcceptSegment(ctx context.Context, publisher models.IAuthor, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptSegment", ctx, publisher, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptSegment indicates an expected call of AcceptSegment.
func (mr *MockIDealerMockRecorder) AcceptSegment(ctx, publisher, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptSegment", reflect.TypeOf((*MockIDealer)(nil).AcceptSegment), ctx, publisher, id)
}

// AllocateInputStorageClaim mocks base method.
func (m *MockIDealer) AllocateInputStorageClaim(ctx context.Context, publisher models.IAuthor, id string) (models.IStorageClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateInputStorageClaim", ctx, publisher, id)
	ret0, _ := ret[0].(models.IStorageClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateInputStorageClaim indicates an expected call of AllocateInputStorageClaim.
func (mr *MockIDealerMockRecorder) AllocateInputStorageClaim(ctx, publisher, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateInputStorageClaim", reflect.TypeOf((*MockIDealer)(nil).AllocateInputStorageClaim), ctx, publisher, id)
}

// AllocateOutputStorageClaim mocks base method.
func (m *MockIDealer) AllocateOutputStorageClaim(ctx context.Context, performer models.IAuthor, id string) (models.IStorageClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateOutputStorageClaim", ctx, performer, id)
	ret0, _ := ret[0].(models.IStorageClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateOutputStorageClaim indicates an expected call of AllocateOutputStorageClaim.
func (mr *MockIDealerMockRecorder) AllocateOutputStorageClaim(ctx, performer, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateOutputStorageClaim", reflect.TypeOf((*MockIDealer)(nil).AllocateOutputStorageClaim), ctx, performer, id)
}

// AllocatePerformerAuthority mocks base method.
func (m *MockIDealer) AllocatePerformerAuthority(ctx context.Context, name string) (models.IAuthor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocatePerformerAuthority", ctx, name)
	ret0, _ := ret[0].(models.IAuthor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocatePerformerAuthority indicates an expected call of AllocatePerformerAuthority.
func (mr *MockIDealerMockRecorder) AllocatePerformerAuthority(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocatePerformerAuthority", reflect.TypeOf((*MockIDealer)(nil).AllocatePerformerAuthority), ctx, name)
}

// AllocatePublisherAuthority mocks base method.
func (m *MockIDealer) AllocatePublisherAuthority(ctx context.Context, name string) (models.IAuthor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocatePublisherAuthority", ctx, name)
	ret0, _ := ret[0].(models.IAuthor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocatePublisherAuthority indicates an expected call of AllocatePublisherAuthority.
func (mr *MockIDealerMockRecorder) AllocatePublisherAuthority(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocatePublisherAuthority", reflect.TypeOf((*MockIDealer)(nil).AllocatePublisherAuthority), ctx, name)
}

// AllocateSegment mocks base method.
func (m *MockIDealer) AllocateSegment(ctx context.Context, publisher models.IAuthor, req models.IDealerRequest) (models.ISegment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateSegment", ctx, publisher, req)
	ret0, _ := ret[0].(models.ISegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateSegment indicates an expected call of AllocateSegment.
func (mr *MockIDealerMockRecorder) AllocateSegment(ctx, publisher, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateSegment", reflect.TypeOf((*MockIDealer)(nil).AllocateSegment), ctx, publisher, req)
}

// CancelSegment mocks base method.
func (m *MockIDealer) CancelSegment(ctx context.Context, publisher models.IAuthor, id, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelSegment", ctx, publisher, id, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelSegment indicates an expected call of CancelSegment.
func (mr *MockIDealerMockRecorder) CancelSegment(ctx, publisher, id, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSegment", reflect.TypeOf((*MockIDealer)(nil).CancelSegment), ctx, publisher, id, reason)
}

// FailSegment mocks base method.
func (m *MockIDealer) FailSegment(ctx context.Context, performer models.IAuthor, id string, err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FailSegment", ctx, performer, id, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// FailSegment indicates an expected call of FailSegment.
func (mr *MockIDealerMockRecorder) FailSegment(ctx, performer, id, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailSegment", reflect.TypeOf((*MockIDealer)(nil).FailSegment), ctx, performer, id, err)
}

// FindFreeSegment mocks base method.
func (m *MockIDealer) FindFreeSegment(ctx context.Context, performer models.IAuthor) (models.ISegment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFreeSegment", ctx, performer)
	ret0, _ := ret[0].(models.ISegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFreeSegment indicates an expected call of FindFreeSegment.
func (mr *MockIDealerMockRecorder) FindFreeSegment(ctx, performer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFreeSegment", reflect.TypeOf((*MockIDealer)(nil).FindFreeSegment), ctx, performer)
}

// FinishSegment mocks base method.
func (m *MockIDealer) FinishSegment(ctx context.Context, performer models.IAuthor, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishSegment", ctx, performer, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinishSegment indicates an expected call of FinishSegment.
func (mr *MockIDealerMockRecorder) FinishSegment(ctx, performer, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishSegment", reflect.TypeOf((*MockIDealer)(nil).FinishSegment), ctx, performer, id)
}

// GetInputStorageClaim mocks base method.
func (m *MockIDealer) GetInputStorageClaim(ctx context.Context, performer models.IAuthor, segmentID string) (models.IStorageClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInputStorageClaim", ctx, performer, segmentID)
	ret0, _ := ret[0].(models.IStorageClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInputStorageClaim indicates an expected call of GetInputStorageClaim.
func (mr *MockIDealerMockRecorder) GetInputStorageClaim(ctx, performer, segmentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInputStorageClaim", reflect.TypeOf((*MockIDealer)(nil).GetInputStorageClaim), ctx, performer, segmentID)
}

// GetOutputStorageClaim mocks base method.
func (m *MockIDealer) GetOutputStorageClaim(ctx context.Context, publisher models.IAuthor, segmentID string) (models.IStorageClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutputStorageClaim", ctx, publisher, segmentID)
	ret0, _ := ret[0].(models.IStorageClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutputStorageClaim indicates an expected call of GetOutputStorageClaim.
func (mr *MockIDealerMockRecorder) GetOutputStorageClaim(ctx, publisher, segmentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutputStorageClaim", reflect.TypeOf((*MockIDealer)(nil).GetOutputStorageClaim), ctx, publisher, segmentID)
}

// GetQueuedSegmentsCount mocks base method.
func (m *MockIDealer) GetQueuedSegmentsCount(ctx context.Context, publisher models.IAuthor) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueuedSegmentsCount", ctx, publisher)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueuedSegmentsCount indicates an expected call of GetQueuedSegmentsCount.
func (mr *MockIDealerMockRecorder) GetQueuedSegmentsCount(ctx, publisher interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueuedSegmentsCount", reflect.TypeOf((*MockIDealer)(nil).GetQueuedSegmentsCount), ctx, publisher)
}

// GetSegmentByID mocks base method.
func (m *MockIDealer) GetSegmentByID(ctx context.Context, publisher models.IAuthor, segmentID string) (models.ISegment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegmentByID", ctx, publisher, segmentID)
	ret0, _ := ret[0].(models.ISegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegmentByID indicates an expected call of GetSegmentByID.
func (mr *MockIDealerMockRecorder) GetSegmentByID(ctx, publisher, segmentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegmentByID", reflect.TypeOf((*MockIDealer)(nil).GetSegmentByID), ctx, publisher, segmentID)
}

// GetSegmentsByOrderID mocks base method.
func (m *MockIDealer) GetSegmentsByOrderID(ctx context.Context, publisher models.IAuthor, orderID string, search models.ISegmentSearchCriteria) ([]models.ISegment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegmentsByOrderID", ctx, publisher, orderID, search)
	ret0, _ := ret[0].([]models.ISegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegmentsByOrderID indicates an expected call of GetSegmentsByOrderID.
func (mr *MockIDealerMockRecorder) GetSegmentsByOrderID(ctx, publisher, orderID, search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegmentsByOrderID", reflect.TypeOf((*MockIDealer)(nil).GetSegmentsByOrderID), ctx, publisher, orderID, search)
}

// NotifyProcess mocks base method.
func (m *MockIDealer) NotifyProcess(ctx context.Context, performer models.IAuthor, id string, p models.Progresser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyProcess", ctx, performer, id, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyProcess indicates an expected call of NotifyProcess.
func (mr *MockIDealerMockRecorder) NotifyProcess(ctx, performer, id, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyProcess", reflect.TypeOf((*MockIDealer)(nil).NotifyProcess), ctx, performer, id, p)
}

// NotifyRawDownload mocks base method.
func (m *MockIDealer) NotifyRawDownload(ctx context.Context, performer models.IAuthor, id string, p models.Progresser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyRawDownload", ctx, performer, id, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyRawDownload indicates an expected call of NotifyRawDownload.
func (mr *MockIDealerMockRecorder) NotifyRawDownload(ctx, performer, id, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyRawDownload", reflect.TypeOf((*MockIDealer)(nil).NotifyRawDownload), ctx, performer, id, p)
}

// NotifyRawUpload mocks base method.
func (m *MockIDealer) NotifyRawUpload(ctx context.Context, publisher models.IAuthor, id string, p models.Progresser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyRawUpload", ctx, publisher, id, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyRawUpload indicates an expected call of NotifyRawUpload.
func (mr *MockIDealerMockRecorder) NotifyRawUpload(ctx, publisher, id, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyRawUpload", reflect.TypeOf((*MockIDealer)(nil).NotifyRawUpload), ctx, publisher, id, p)
}

// NotifyResultDownload mocks base method.
func (m *MockIDealer) NotifyResultDownload(ctx context.Context, publisher models.IAuthor, id string, p models.Progresser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyResultDownload", ctx, publisher, id, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyResultDownload indicates an expected call of NotifyResultDownload.
func (mr *MockIDealerMockRecorder) NotifyResultDownload(ctx, publisher, id, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyResultDownload", reflect.TypeOf((*MockIDealer)(nil).NotifyResultDownload), ctx, publisher, id, p)
}

// NotifyResultUpload mocks base method.
func (m *MockIDealer) NotifyResultUpload(ctx context.Context, performer models.IAuthor, id string, p models.Progresser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyResultUpload", ctx, performer, id, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyResultUpload indicates an expected call of NotifyResultUpload.
func (mr *MockIDealerMockRecorder) NotifyResultUpload(ctx, performer, id, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyResultUpload", reflect.TypeOf((*MockIDealer)(nil).NotifyResultUpload), ctx, performer, id, p)
}

// ObserveSegments mocks base method.
func (m *MockIDealer) ObserveSegments(ctx context.Context, wg chwg.WaitGrouper) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ObserveSegments", ctx, wg)
}

// ObserveSegments indicates an expected call of ObserveSegments.
func (mr *MockIDealerMockRecorder) ObserveSegments(ctx, wg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveSegments", reflect.TypeOf((*MockIDealer)(nil).ObserveSegments), ctx, wg)
}

// PublishSegment mocks base method.
func (m *MockIDealer) PublishSegment(ctx context.Context, publisher models.IAuthor, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishSegment", ctx, publisher, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishSegment indicates an expected call of PublishSegment.
func (mr *MockIDealerMockRecorder) PublishSegment(ctx, publisher, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishSegment", reflect.TypeOf((*MockIDealer)(nil).PublishSegment), ctx, publisher, id)
}

// QuitSegment mocks base method.
func (m *MockIDealer) QuitSegment(ctx context.Context, performer models.IAuthor, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuitSegment", ctx, performer, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// QuitSegment indicates an expected call of QuitSegment.
func (mr *MockIDealerMockRecorder) QuitSegment(ctx, performer, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuitSegment", reflect.TypeOf((*MockIDealer)(nil).QuitSegment), ctx, performer, id)
}

// RepublishSegment mocks base method.
func (m *MockIDealer) RepublishSegment(ctx context.Context, publisher models.IAuthor, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepublishSegment", ctx, publisher, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RepublishSegment indicates an expected call of RepublishSegment.
func (mr *MockIDealerMockRecorder) RepublishSegment(ctx, publisher, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepublishSegment", reflect.TypeOf((*MockIDealer)(nil).RepublishSegment), ctx, publisher, id)
}

// MockIContracterDealer is a mock of IContracterDealer interface.
type MockIContracterDealer struct {
	ctrl     *gomock.Controller
	recorder *MockIContracterDealerMockRecorder
}

// MockIContracterDealerMockRecorder is the mock recorder for MockIContracterDealer.
type MockIContracterDealerMockRecorder struct {
	mock *MockIContracterDealer
}

// NewMockIContracterDealer creates a new mock instance.
func NewMockIContracterDealer(ctrl *gomock.Controller) *MockIContracterDealer {
	mock := &MockIContracterDealer{ctrl: ctrl}
	mock.recorder = &MockIContracterDealerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIContracterDealer) EXPECT() *MockIContracterDealerMockRecorder {
	return m.recorder
}

// AcceptSegment mocks base method.
func (m *MockIContracterDealer) AcceptSegment(ctx context.Context, publisher models.IAuthor, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptSegment", ctx, publisher, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptSegment indicates an expected call of AcceptSegment.
func (mr *MockIContracterDealerMockRecorder) AcceptSegment(ctx, publisher, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptSegment", reflect.TypeOf((*MockIContracterDealer)(nil).AcceptSegment), ctx, publisher, id)
}

// AllocateInputStorageClaim mocks base method.
func (m *MockIContracterDealer) AllocateInputStorageClaim(ctx context.Context, publisher models.IAuthor, id string) (models.IStorageClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateInputStorageClaim", ctx, publisher, id)
	ret0, _ := ret[0].(models.IStorageClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateInputStorageClaim indicates an expected call of AllocateInputStorageClaim.
func (mr *MockIContracterDealerMockRecorder) AllocateInputStorageClaim(ctx, publisher, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateInputStorageClaim", reflect.TypeOf((*MockIContracterDealer)(nil).AllocateInputStorageClaim), ctx, publisher, id)
}

// AllocatePublisherAuthority mocks base method.
func (m *MockIContracterDealer) AllocatePublisherAuthority(ctx context.Context, name string) (models.IAuthor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocatePublisherAuthority", ctx, name)
	ret0, _ := ret[0].(models.IAuthor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocatePublisherAuthority indicates an expected call of AllocatePublisherAuthority.
func (mr *MockIContracterDealerMockRecorder) AllocatePublisherAuthority(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocatePublisherAuthority", reflect.TypeOf((*MockIContracterDealer)(nil).AllocatePublisherAuthority), ctx, name)
}

// AllocateSegment mocks base method.
func (m *MockIContracterDealer) AllocateSegment(ctx context.Context, publisher models.IAuthor, req models.IDealerRequest) (models.ISegment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateSegment", ctx, publisher, req)
	ret0, _ := ret[0].(models.ISegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateSegment indicates an expected call of AllocateSegment.
func (mr *MockIContracterDealerMockRecorder) AllocateSegment(ctx, publisher, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateSegment", reflect.TypeOf((*MockIContracterDealer)(nil).AllocateSegment), ctx, publisher, req)
}

// CancelSegment mocks base method.
func (m *MockIContracterDealer) CancelSegment(ctx context.Context, publisher models.IAuthor, id, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelSegment", ctx, publisher, id, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelSegment indicates an expected call of CancelSegment.
func (mr *MockIContracterDealerMockRecorder) CancelSegment(ctx, publisher, id, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSegment", reflect.TypeOf((*MockIContracterDealer)(nil).CancelSegment), ctx, publisher, id, reason)
}

// GetOutputStorageClaim mocks base method.
func (m *MockIContracterDealer) GetOutputStorageClaim(ctx context.Context, publisher models.IAuthor, segmentID string) (models.IStorageClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutputStorageClaim", ctx, publisher, segmentID)
	ret0, _ := ret[0].(models.IStorageClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutputStorageClaim indicates an expected call of GetOutputStorageClaim.
func (mr *MockIContracterDealerMockRecorder) GetOutputStorageClaim(ctx, publisher, segmentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutputStorageClaim", reflect.TypeOf((*MockIContracterDealer)(nil).GetOutputStorageClaim), ctx, publisher, segmentID)
}

// GetQueuedSegmentsCount mocks base method.
func (m *MockIContracterDealer) GetQueuedSegmentsCount(ctx context.Context, publisher models.IAuthor) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueuedSegmentsCount", ctx, publisher)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueuedSegmentsCount indicates an expected call of GetQueuedSegmentsCount.
func (mr *MockIContracterDealerMockRecorder) GetQueuedSegmentsCount(ctx, publisher interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueuedSegmentsCount", reflect.TypeOf((*MockIContracterDealer)(nil).GetQueuedSegmentsCount), ctx, publisher)
}

// GetSegmentByID mocks base method.
func (m *MockIContracterDealer) GetSegmentByID(ctx context.Context, publisher models.IAuthor, segmentID string) (models.ISegment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegmentByID", ctx, publisher, segmentID)
	ret0, _ := ret[0].(models.ISegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegmentByID indicates an expected call of GetSegmentByID.
func (mr *MockIContracterDealerMockRecorder) GetSegmentByID(ctx, publisher, segmentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegmentByID", reflect.TypeOf((*MockIContracterDealer)(nil).GetSegmentByID), ctx, publisher, segmentID)
}

// GetSegmentsByOrderID mocks base method.
func (m *MockIContracterDealer) GetSegmentsByOrderID(ctx context.Context, publisher models.IAuthor, orderID string, search models.ISegmentSearchCriteria) ([]models.ISegment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegmentsByOrderID", ctx, publisher, orderID, search)
	ret0, _ := ret[0].([]models.ISegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegmentsByOrderID indicates an expected call of GetSegmentsByOrderID.
func (mr *MockIContracterDealerMockRecorder) GetSegmentsByOrderID(ctx, publisher, orderID, search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegmentsByOrderID", reflect.TypeOf((*MockIContracterDealer)(nil).GetSegmentsByOrderID), ctx, publisher, orderID, search)
}

// NotifyRawUpload mocks base method.
func (m *MockIContracterDealer) NotifyRawUpload(ctx context.Context, publisher models.IAuthor, id string, p models.Progresser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyRawUpload", ctx, publisher, id, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyRawUpload indicates an expected call of NotifyRawUpload.
func (mr *MockIContracterDealerMockRecorder) NotifyRawUpload(ctx, publisher, id, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyRawUpload", reflect.TypeOf((*MockIContracterDealer)(nil).NotifyRawUpload), ctx, publisher, id, p)
}

// NotifyResultDownload mocks base method.
func (m *MockIContracterDealer) NotifyResultDownload(ctx context.Context, publisher models.IAuthor, id string, p models.Progresser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyResultDownload", ctx, publisher, id, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyResultDownload indicates an expected call of NotifyResultDownload.
func (mr *MockIContracterDealerMockRecorder) NotifyResultDownload(ctx, publisher, id, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyResultDownload", reflect.TypeOf((*MockIContracterDealer)(nil).NotifyResultDownload), ctx, publisher, id, p)
}

// ObserveSegments mocks base method.
func (m *MockIContracterDealer) ObserveSegments(ctx context.Context, wg chwg.WaitGrouper) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ObserveSegments", ctx, wg)
}

// ObserveSegments indicates an expected call of ObserveSegments.
func (mr *MockIContracterDealerMockRecorder) ObserveSegments(ctx, wg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveSegments", reflect.TypeOf((*MockIContracterDealer)(nil).ObserveSegments), ctx, wg)
}

// PublishSegment mocks base method.
func (m *MockIContracterDealer) PublishSegment(ctx context.Context, publisher models.IAuthor, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishSegment", ctx, publisher, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishSegment indicates an expected call of PublishSegment.
func (mr *MockIContracterDealerMockRecorder) PublishSegment(ctx, publisher, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishSegment", reflect.TypeOf((*MockIContracterDealer)(nil).PublishSegment), ctx, publisher, id)
}

// RepublishSegment mocks base method.
func (m *MockIContracterDealer) RepublishSegment(ctx context.Context, publisher models.IAuthor, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepublishSegment", ctx, publisher, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RepublishSegment indicates an expected call of RepublishSegment.
func (mr *MockIContracterDealerMockRecorder) RepublishSegment(ctx, publisher, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepublishSegment", reflect.TypeOf((*MockIContracterDealer)(nil).RepublishSegment), ctx, publisher, id)
}

// MockIWorkerDealer is a mock of IWorkerDealer interface.
type MockIWorkerDealer struct {
	ctrl     *gomock.Controller
	recorder *MockIWorkerDealerMockRecorder
}

// MockIWorkerDealerMockRecorder is the mock recorder for MockIWorkerDealer.
type MockIWorkerDealerMockRecorder struct {
	mock *MockIWorkerDealer
}

// NewMockIWorkerDealer creates a new mock instance.
func NewMockIWorkerDealer(ctrl *gomock.Controller) *MockIWorkerDealer {
	mock := &MockIWorkerDealer{ctrl: ctrl}
	mock.recorder = &MockIWorkerDealerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWorkerDealer) EXPECT() *MockIWorkerDealerMockRecorder {
	return m.recorder
}

// AllocateOutputStorageClaim mocks base method.
func (m *MockIWorkerDealer) AllocateOutputStorageClaim(ctx context.Context, performer models.IAuthor, id string) (models.IStorageClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateOutputStorageClaim", ctx, performer, id)
	ret0, _ := ret[0].(models.IStorageClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateOutputStorageClaim indicates an expected call of AllocateOutputStorageClaim.
func (mr *MockIWorkerDealerMockRecorder) AllocateOutputStorageClaim(ctx, performer, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateOutputStorageClaim", reflect.TypeOf((*MockIWorkerDealer)(nil).AllocateOutputStorageClaim), ctx, performer, id)
}

// AllocatePerformerAuthority mocks base method.
func (m *MockIWorkerDealer) AllocatePerformerAuthority(ctx context.Context, name string) (models.IAuthor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocatePerformerAuthority", ctx, name)
	ret0, _ := ret[0].(models.IAuthor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocatePerformerAuthority indicates an expected call of AllocatePerformerAuthority.
func (mr *MockIWorkerDealerMockRecorder) AllocatePerformerAuthority(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocatePerformerAuthority", reflect.TypeOf((*MockIWorkerDealer)(nil).AllocatePerformerAuthority), ctx, name)
}

// FailSegment mocks base method.
func (m *MockIWorkerDealer) FailSegment(ctx context.Context, performer models.IAuthor, id string, err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FailSegment", ctx, performer, id, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// FailSegment indicates an expected call of FailSegment.
func (mr *MockIWorkerDealerMockRecorder) FailSegment(ctx, performer, id, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailSegment", reflect.TypeOf((*MockIWorkerDealer)(nil).FailSegment), ctx, performer, id, err)
}

// FindFreeSegment mocks base method.
func (m *MockIWorkerDealer) FindFreeSegment(ctx context.Context, performer models.IAuthor) (models.ISegment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFreeSegment", ctx, performer)
	ret0, _ := ret[0].(models.ISegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFreeSegment indicates an expected call of FindFreeSegment.
func (mr *MockIWorkerDealerMockRecorder) FindFreeSegment(ctx, performer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFreeSegment", reflect.TypeOf((*MockIWorkerDealer)(nil).FindFreeSegment), ctx, performer)
}

// FinishSegment mocks base method.
func (m *MockIWorkerDealer) FinishSegment(ctx context.Context, performer models.IAuthor, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishSegment", ctx, performer, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinishSegment indicates an expected call of FinishSegment.
func (mr *MockIWorkerDealerMockRecorder) FinishSegment(ctx, performer, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishSegment", reflect.TypeOf((*MockIWorkerDealer)(nil).FinishSegment), ctx, performer, id)
}

// GetInputStorageClaim mocks base method.
func (m *MockIWorkerDealer) GetInputStorageClaim(ctx context.Context, performer models.IAuthor, segmentID string) (models.IStorageClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInputStorageClaim", ctx, performer, segmentID)
	ret0, _ := ret[0].(models.IStorageClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInputStorageClaim indicates an expected call of GetInputStorageClaim.
func (mr *MockIWorkerDealerMockRecorder) GetInputStorageClaim(ctx, performer, segmentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInputStorageClaim", reflect.TypeOf((*MockIWorkerDealer)(nil).GetInputStorageClaim), ctx, performer, segmentID)
}

// NotifyProcess mocks base method.
func (m *MockIWorkerDealer) NotifyProcess(ctx context.Context, performer models.IAuthor, id string, p models.Progresser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyProcess", ctx, performer, id, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyProcess indicates an expected call of NotifyProcess.
func (mr *MockIWorkerDealerMockRecorder) NotifyProcess(ctx, performer, id, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyProcess", reflect.TypeOf((*MockIWorkerDealer)(nil).NotifyProcess), ctx, performer, id, p)
}

// NotifyRawDownload mocks base method.
func (m *MockIWorkerDealer) NotifyRawDownload(ctx context.Context, performer models.IAuthor, id string, p models.Progresser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyRawDownload", ctx, performer, id, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyRawDownload indicates an expected call of NotifyRawDownload.
func (mr *MockIWorkerDealerMockRecorder) NotifyRawDownload(ctx, performer, id, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyRawDownload", reflect.TypeOf((*MockIWorkerDealer)(nil).NotifyRawDownload), ctx, performer, id, p)
}

// NotifyResultUpload mocks base method.
func (m *MockIWorkerDealer) NotifyResultUpload(ctx context.Context, performer models.IAuthor, id string, p models.Progresser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyResultUpload", ctx, performer, id, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyResultUpload indicates an expected call of NotifyResultUpload.
func (mr *MockIWorkerDealerMockRecorder) NotifyResultUpload(ctx, performer, id, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyResultUpload", reflect.TypeOf((*MockIWorkerDealer)(nil).NotifyResultUpload), ctx, performer, id, p)
}

// QuitSegment mocks base method.
func (m *MockIWorkerDealer) QuitSegment(ctx context.Context, performer models.IAuthor, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuitSegment", ctx, performer, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// QuitSegment indicates an expected call of QuitSegment.
func (mr *MockIWorkerDealerMockRecorder) QuitSegment(ctx, performer, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuitSegment", reflect.TypeOf((*MockIWorkerDealer)(nil).QuitSegment), ctx, performer, id)
}

// MockIRegistry is a mock of IRegistry interface.
type MockIRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockIRegistryMockRecorder
}

// MockIRegistryMockRecorder is the mock recorder for MockIRegistry.
type MockIRegistryMockRecorder struct {
	mock *MockIRegistry
}

// NewMockIRegistry creates a new mock instance.
func NewMockIRegistry(ctrl *gomock.Controller) *MockIRegistry {
	mock := &MockIRegistry{ctrl: ctrl}
	mock.recorder = &MockIRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRegistry) EXPECT() *MockIRegistryMockRecorder {
	return m.recorder
}

// Closed mocks base method.
func (m *MockIRegistry) Closed() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Closed")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Closed indicates an expected call of Closed.
func (mr *MockIRegistryMockRecorder) Closed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Closed", reflect.TypeOf((*MockIRegistry)(nil).Closed))
}

// FindOrderByID mocks base method.
func (m *MockIRegistry) FindOrderByID(ctx context.Context, id string) (models.IOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrderByID", ctx, id)
	ret0, _ := ret[0].(models.IOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrderByID indicates an expected call of FindOrderByID.
func (mr *MockIRegistryMockRecorder) FindOrderByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrderByID", reflect.TypeOf((*MockIRegistry)(nil).FindOrderByID), ctx, id)
}

// FindSegmentByID mocks base method.
func (m *MockIRegistry) FindSegmentByID(ctx context.Context, id string) (models.ISegment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSegmentByID", ctx, id)
	ret0, _ := ret[0].(models.ISegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSegmentByID indicates an expected call of FindSegmentByID.
func (mr *MockIRegistryMockRecorder) FindSegmentByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSegmentByID", reflect.TypeOf((*MockIRegistry)(nil).FindSegmentByID), ctx, id)
}

// FindSegmentsByOrderID mocks base method.
func (m *MockIRegistry) FindSegmentsByOrderID(ctx context.Context, orderID string) ([]models.ISegment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSegmentsByOrderID", ctx, orderID)
	ret0, _ := ret[0].([]models.ISegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSegmentsByOrderID indicates an expected call of FindSegmentsByOrderID.
func (mr *MockIRegistryMockRecorder) FindSegmentsByOrderID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSegmentsByOrderID", reflect.TypeOf((*MockIRegistry)(nil).FindSegmentsByOrderID), ctx, orderID)
}

// Persist mocks base method.
func (m *MockIRegistry) Persist() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Persist")
	ret0, _ := ret[0].(error)
	return ret0
}

// Persist indicates an expected call of Persist.
func (mr *MockIRegistryMockRecorder) Persist() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Persist", reflect.TypeOf((*MockIRegistry)(nil).Persist))
}

// PersistOrder mocks base method.
func (m *MockIRegistry) PersistOrder(ctx context.Context, order models.IOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistOrder indicates an expected call of PersistOrder.
func (mr *MockIRegistryMockRecorder) PersistOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistOrder", reflect.TypeOf((*MockIRegistry)(nil).PersistOrder), ctx, order)
}

// PersistSegment mocks base method.
func (m *MockIRegistry) PersistSegment(ctx context.Context, segment models.ISegment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistSegment", ctx, segment)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistSegment indicates an expected call of PersistSegment.
func (mr *MockIRegistryMockRecorder) PersistSegment(ctx, segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistSegment", reflect.TypeOf((*MockIRegistry)(nil).PersistSegment), ctx, segment)
}

// SearchAllOrders mocks base method.
func (m *MockIRegistry) SearchAllOrders(ctx context.Context, check func(models.IOrder) bool) ([]models.IOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAllOrders", ctx, check)
	ret0, _ := ret[0].([]models.IOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAllOrders indicates an expected call of SearchAllOrders.
func (mr *MockIRegistryMockRecorder) SearchAllOrders(ctx, check interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAllOrders", reflect.TypeOf((*MockIRegistry)(nil).SearchAllOrders), ctx, check)
}

// SearchAllSegments mocks base method.
func (m *MockIRegistry) SearchAllSegments(ctx context.Context, check func(models.ISegment) bool) ([]models.ISegment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAllSegments", ctx, check)
	ret0, _ := ret[0].([]models.ISegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAllSegments indicates an expected call of SearchAllSegments.
func (mr *MockIRegistryMockRecorder) SearchAllSegments(ctx, check interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAllSegments", reflect.TypeOf((*MockIRegistry)(nil).SearchAllSegments), ctx, check)
}

// SearchOrder mocks base method.
func (m *MockIRegistry) SearchOrder(ctx context.Context, check func(models.IOrder) bool) (models.IOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchOrder", ctx, check)
	ret0, _ := ret[0].(models.IOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchOrder indicates an expected call of SearchOrder.
func (mr *MockIRegistryMockRecorder) SearchOrder(ctx, check interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchOrder", reflect.TypeOf((*MockIRegistry)(nil).SearchOrder), ctx, check)
}

// SearchSegment mocks base method.
func (m *MockIRegistry) SearchSegment(ctx context.Context, check func(models.ISegment) bool) (models.ISegment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSegment", ctx, check)
	ret0, _ := ret[0].(models.ISegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSegment indicates an expected call of SearchSegment.
func (mr *MockIRegistryMockRecorder) SearchSegment(ctx, check interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSegment", reflect.TypeOf((*MockIRegistry)(nil).SearchSegment), ctx, check)
}

// MockIContracterRegistry is a mock of IContracterRegistry interface.
type MockIContracterRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockIContracterRegistryMockRecorder
}

// MockIContracterRegistryMockRecorder is the mock recorder for MockIContracterRegistry.
type MockIContracterRegistryMockRecorder struct {
	mock *MockIContracterRegistry
}

// NewMockIContracterRegistry creates a new mock instance.
func NewMockIContracterRegistry(ctrl *gomock.Controller) *MockIContracterRegistry {
	mock := &MockIContracterRegistry{ctrl: ctrl}
	mock.recorder = &MockIContracterRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIContracterRegistry) EXPECT() *MockIContracterRegistryMockRecorder {
	return m.recorder
}

// Closed mocks base method.
func (m *MockIContracterRegistry) Closed() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Closed")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Closed indicates an expected call of Closed.
func (mr *MockIContracterRegistryMockRecorder) Closed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Closed", reflect.TypeOf((*MockIContracterRegistry)(nil).Closed))
}

// FindOrderByID mocks base method.
func (m *MockIContracterRegistry) FindOrderByID(ctx context.Context, id string) (models.IOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrderByID", ctx, id)
	ret0, _ := ret[0].(models.IOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrderByID indicates an expected call of FindOrderByID.
func (mr *MockIContracterRegistryMockRecorder) FindOrderByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrderByID", reflect.TypeOf((*MockIContracterRegistry)(nil).FindOrderByID), ctx, id)
}

// FindSegmentByID mocks base method.
func (m *MockIContracterRegistry) FindSegmentByID(ctx context.Context, id string) (models.ISegment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSegmentByID", ctx, id)
	ret0, _ := ret[0].(models.ISegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSegmentByID indicates an expected call of FindSegmentByID.
func (mr *MockIContracterRegistryMockRecorder) FindSegmentByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSegmentByID", reflect.TypeOf((*MockIContracterRegistry)(nil).FindSegmentByID), ctx, id)
}

// FindSegmentsByOrderID mocks base method.
func (m *MockIContracterRegistry) FindSegmentsByOrderID(ctx context.Context, orderID string) ([]models.ISegment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSegmentsByOrderID", ctx, orderID)
	ret0, _ := ret[0].([]models.ISegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSegmentsByOrderID indicates an expected call of FindSegmentsByOrderID.
func (mr *MockIContracterRegistryMockRecorder) FindSegmentsByOrderID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSegmentsByOrderID", reflect.TypeOf((*MockIContracterRegistry)(nil).FindSegmentsByOrderID), ctx, orderID)
}

// Persist mocks base method.
func (m *MockIContracterRegistry) Persist() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Persist")
	ret0, _ := ret[0].(error)
	return ret0
}

// Persist indicates an expected call of Persist.
func (mr *MockIContracterRegistryMockRecorder) Persist() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Persist", reflect.TypeOf((*MockIContracterRegistry)(nil).Persist))
}

// PersistOrder mocks base method.
func (m *MockIContracterRegistry) PersistOrder(ctx context.Context, order models.IOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistOrder indicates an expected call of PersistOrder.
func (mr *MockIContracterRegistryMockRecorder) PersistOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistOrder", reflect.TypeOf((*MockIContracterRegistry)(nil).PersistOrder), ctx, order)
}

// PersistSegment mocks base method.
func (m *MockIContracterRegistry) PersistSegment(ctx context.Context, segment models.ISegment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistSegment", ctx, segment)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistSegment indicates an expected call of PersistSegment.
func (mr *MockIContracterRegistryMockRecorder) PersistSegment(ctx, segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistSegment", reflect.TypeOf((*MockIContracterRegistry)(nil).PersistSegment), ctx, segment)
}

// SearchAllOrders mocks base method.
func (m *MockIContracterRegistry) SearchAllOrders(ctx context.Context, check func(models.IOrder) bool) ([]models.IOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAllOrders", ctx, check)
	ret0, _ := ret[0].([]models.IOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAllOrders indicates an expected call of SearchAllOrders.
func (mr *MockIContracterRegistryMockRecorder) SearchAllOrders(ctx, check interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAllOrders", reflect.TypeOf((*MockIContracterRegistry)(nil).SearchAllOrders), ctx, check)
}

// SearchOrder mocks base method.
func (m *MockIContracterRegistry) SearchOrder(ctx context.Context, check func(models.IOrder) bool) (models.IOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchOrder", ctx, check)
	ret0, _ := ret[0].(models.IOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchOrder indicates an expected call of SearchOrder.
func (mr *MockIContracterRegistryMockRecorder) SearchOrder(ctx, check interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchOrder", reflect.TypeOf((*MockIContracterRegistry)(nil).SearchOrder), ctx, check)
}

// MockIDealerRegistry is a mock of IDealerRegistry interface.
type MockIDealerRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockIDealerRegistryMockRecorder
}

// MockIDealerRegistryMockRecorder is the mock recorder for MockIDealerRegistry.
type MockIDealerRegistryMockRecorder struct {
	mock *MockIDealerRegistry
}

// NewMockIDealerRegistry creates a new mock instance.
func NewMockIDealerRegistry(ctrl *gomock.Controller) *MockIDealerRegistry {
	mock := &MockIDealerRegistry{ctrl: ctrl}
	mock.recorder = &MockIDealerRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDealerRegistry) EXPECT() *MockIDealerRegistryMockRecorder {
	return m.recorder
}

// Closed mocks base method.
func (m *MockIDealerRegistry) Closed() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Closed")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Closed indicates an expected call of Closed.
func (mr *MockIDealerRegistryMockRecorder) Closed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Closed", reflect.TypeOf((*MockIDealerRegistry)(nil).Closed))
}

// FindSegmentByID mocks base method.
func (m *MockIDealerRegistry) FindSegmentByID(ctx context.Context, id string) (models.ISegment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSegmentByID", ctx, id)
	ret0, _ := ret[0].(models.ISegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSegmentByID indicates an expected call of FindSegmentByID.
func (mr *MockIDealerRegistryMockRecorder) FindSegmentByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSegmentByID", reflect.TypeOf((*MockIDealerRegistry)(nil).FindSegmentByID), ctx, id)
}

// FindSegmentsByOrderID mocks base method.
func (m *MockIDealerRegistry) FindSegmentsByOrderID(ctx context.Context, orderID string) ([]models.ISegment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSegmentsByOrderID", ctx, orderID)
	ret0, _ := ret[0].([]models.ISegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSegmentsByOrderID indicates an expected call of FindSegmentsByOrderID.
func (mr *MockIDealerRegistryMockRecorder) FindSegmentsByOrderID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSegmentsByOrderID", reflect.TypeOf((*MockIDealerRegistry)(nil).FindSegmentsByOrderID), ctx, orderID)
}

// Persist mocks base method.
func (m *MockIDealerRegistry) Persist() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Persist")
	ret0, _ := ret[0].(error)
	return ret0
}

// Persist indicates an expected call of Persist.
func (mr *MockIDealerRegistryMockRecorder) Persist() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Persist", reflect.TypeOf((*MockIDealerRegistry)(nil).Persist))
}

// PersistSegment mocks base method.
func (m *MockIDealerRegistry) PersistSegment(ctx context.Context, segment models.ISegment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistSegment", ctx, segment)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistSegment indicates an expected call of PersistSegment.
func (mr *MockIDealerRegistryMockRecorder) PersistSegment(ctx, segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistSegment", reflect.TypeOf((*MockIDealerRegistry)(nil).PersistSegment), ctx, segment)
}

// SearchAllSegments mocks base method.
func (m *MockIDealerRegistry) SearchAllSegments(ctx context.Context, check func(models.ISegment) bool) ([]models.ISegment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAllSegments", ctx, check)
	ret0, _ := ret[0].([]models.ISegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAllSegments indicates an expected call of SearchAllSegments.
func (mr *MockIDealerRegistryMockRecorder) SearchAllSegments(ctx, check interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAllSegments", reflect.TypeOf((*MockIDealerRegistry)(nil).SearchAllSegments), ctx, check)
}

// SearchSegment mocks base method.
func (m *MockIDealerRegistry) SearchSegment(ctx context.Context, check func(models.ISegment) bool) (models.ISegment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSegment", ctx, check)
	ret0, _ := ret[0].(models.ISegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSegment indicates an expected call of SearchSegment.
func (mr *MockIDealerRegistryMockRecorder) SearchSegment(ctx, check interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSegment", reflect.TypeOf((*MockIDealerRegistry)(nil).SearchSegment), ctx, check)
}

// MockIStorageController is a mock of IStorageController interface.
type MockIStorageController struct {
	ctrl     *gomock.Controller
	recorder *MockIStorageControllerMockRecorder
}

// MockIStorageControllerMockRecorder is the mock recorder for MockIStorageController.
type MockIStorageControllerMockRecorder struct {
	mock *MockIStorageController
}

// NewMockIStorageController creates a new mock instance.
func NewMockIStorageController(ctrl *gomock.Controller) *MockIStorageController {
	mock := &MockIStorageController{ctrl: ctrl}
	mock.recorder = &MockIStorageControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStorageController) EXPECT() *MockIStorageControllerMockRecorder {
	return m.recorder
}

// AllocateStorageClaim mocks base method.
func (m *MockIStorageController) AllocateStorageClaim(ctx context.Context, name string) (models.IStorageClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateStorageClaim", ctx, name)
	ret0, _ := ret[0].(models.IStorageClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateStorageClaim indicates an expected call of AllocateStorageClaim.
func (mr *MockIStorageControllerMockRecorder) AllocateStorageClaim(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateStorageClaim", reflect.TypeOf((*MockIStorageController)(nil).AllocateStorageClaim), ctx, name)
}

// BuildStorageClaim mocks base method.
func (m *MockIStorageController) BuildStorageClaim(name string) (models.IStorageClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildStorageClaim", name)
	ret0, _ := ret[0].(models.IStorageClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildStorageClaim indicates an expected call of BuildStorageClaim.
func (mr *MockIStorageControllerMockRecorder) BuildStorageClaim(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildStorageClaim", reflect.TypeOf((*MockIStorageController)(nil).BuildStorageClaim), name)
}

// PurgeStorageClaim mocks base method.
func (m *MockIStorageController) PurgeStorageClaim(ctx context.Context, claim models.IStorageClaim) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurgeStorageClaim", ctx, claim)
	ret0, _ := ret[0].(error)
	return ret0
}

// PurgeStorageClaim indicates an expected call of PurgeStorageClaim.
func (mr *MockIStorageControllerMockRecorder) PurgeStorageClaim(ctx, claim interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgeStorageClaim", reflect.TypeOf((*MockIStorageController)(nil).PurgeStorageClaim), ctx, claim)
}

// MockIStorageClaim is a mock of IStorageClaim interface.
type MockIStorageClaim struct {
	ctrl     *gomock.Controller
	recorder *MockIStorageClaimMockRecorder
}

// MockIStorageClaimMockRecorder is the mock recorder for MockIStorageClaim.
type MockIStorageClaimMockRecorder struct {
	mock *MockIStorageClaim
}

// NewMockIStorageClaim creates a new mock instance.
func NewMockIStorageClaim(ctrl *gomock.Controller) *MockIStorageClaim {
	mock := &MockIStorageClaim{ctrl: ctrl}
	mock.recorder = &MockIStorageClaimMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStorageClaim) EXPECT() *MockIStorageClaimMockRecorder {
	return m.recorder
}

// GetID mocks base method.
func (m *MockIStorageClaim) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockIStorageClaimMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockIStorageClaim)(nil).GetID))
}

// GetName mocks base method.
func (m *MockIStorageClaim) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockIStorageClaimMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockIStorageClaim)(nil).GetName))
}

// GetSize mocks base method.
func (m *MockIStorageClaim) GetSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetSize indicates an expected call of GetSize.
func (mr *MockIStorageClaimMockRecorder) GetSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSize", reflect.TypeOf((*MockIStorageClaim)(nil).GetSize))
}

// GetType mocks base method.
func (m *MockIStorageClaim) GetType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockIStorageClaimMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockIStorageClaim)(nil).GetType))
}

// GetURL mocks base method.
func (m *MockIStorageClaim) GetURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetURL indicates an expected call of GetURL.
func (mr *MockIStorageClaimMockRecorder) GetURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockIStorageClaim)(nil).GetURL))
}

// ReadTo mocks base method.
func (m *MockIStorageClaim) ReadTo(arg0 io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadTo indicates an expected call of ReadTo.
func (mr *MockIStorageClaimMockRecorder) ReadTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTo", reflect.TypeOf((*MockIStorageClaim)(nil).ReadTo), arg0)
}

// WriteFrom mocks base method.
func (m *MockIStorageClaim) WriteFrom(arg0 io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFrom", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFrom indicates an expected call of WriteFrom.
func (mr *MockIStorageClaimMockRecorder) WriteFrom(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFrom", reflect.TypeOf((*MockIStorageClaim)(nil).WriteFrom), arg0)
}

// MockIStorageClient is a mock of IStorageClient interface.
type MockIStorageClient struct {
	ctrl     *gomock.Controller
	recorder *MockIStorageClientMockRecorder
}

// MockIStorageClientMockRecorder is the mock recorder for MockIStorageClient.
type MockIStorageClientMockRecorder struct {
	mock *MockIStorageClient
}

// NewMockIStorageClient creates a new mock instance.
func NewMockIStorageClient(ctrl *gomock.Controller) *MockIStorageClient {
	mock := &MockIStorageClient{ctrl: ctrl}
	mock.recorder = &MockIStorageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStorageClient) EXPECT() *MockIStorageClientMockRecorder {
	return m.recorder
}

// BuildStorageClaimByURL mocks base method.
func (m *MockIStorageClient) BuildStorageClaimByURL(url string) (models.IStorageClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildStorageClaimByURL", url)
	ret0, _ := ret[0].(models.IStorageClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildStorageClaimByURL indicates an expected call of BuildStorageClaimByURL.
func (mr *MockIStorageClientMockRecorder) BuildStorageClaimByURL(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildStorageClaimByURL", reflect.TypeOf((*MockIStorageClient)(nil).BuildStorageClaimByURL), url)
}

// MakeLocalCopy mocks base method.
func (m *MockIStorageClient) MakeLocalCopy(ctx context.Context, sc models.IStorageClaim, p chan models.Progresser) (files.Filer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeLocalCopy", ctx, sc, p)
	ret0, _ := ret[0].(files.Filer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeLocalCopy indicates an expected call of MakeLocalCopy.
func (mr *MockIStorageClientMockRecorder) MakeLocalCopy(ctx, sc, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeLocalCopy", reflect.TypeOf((*MockIStorageClient)(nil).MakeLocalCopy), ctx, sc, p)
}

// MoveFileToStorageClaim mocks base method.
func (m *MockIStorageClient) MoveFileToStorageClaim(ctx context.Context, file files.Filer, sc models.IStorageClaim, p chan models.Progresser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveFileToStorageClaim", ctx, file, sc, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveFileToStorageClaim indicates an expected call of MoveFileToStorageClaim.
func (mr *MockIStorageClientMockRecorder) MoveFileToStorageClaim(ctx, file, sc, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveFileToStorageClaim", reflect.TypeOf((*MockIStorageClient)(nil).MoveFileToStorageClaim), ctx, file, sc, p)
}

// RemoveLocalCopy mocks base method.
func (m *MockIStorageClient) RemoveLocalCopy(ctx context.Context, sc models.IStorageClaim) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLocalCopy", ctx, sc)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLocalCopy indicates an expected call of RemoveLocalCopy.
func (mr *MockIStorageClientMockRecorder) RemoveLocalCopy(ctx, sc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLocalCopy", reflect.TypeOf((*MockIStorageClient)(nil).RemoveLocalCopy), ctx, sc)
}

// MockProgresser is a mock of Progresser interface.
type MockProgresser struct {
	ctrl     *gomock.Controller
	recorder *MockProgresserMockRecorder
}

// MockProgresserMockRecorder is the mock recorder for MockProgresser.
type MockProgresserMockRecorder struct {
	mock *MockProgresser
}

// NewMockProgresser creates a new mock instance.
func NewMockProgresser(ctrl *gomock.Controller) *MockProgresser {
	mock := &MockProgresser{ctrl: ctrl}
	mock.recorder = &MockProgresserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProgresser) EXPECT() *MockProgresserMockRecorder {
	return m.recorder
}

// Percent mocks base method.
func (m *MockProgresser) Percent() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Percent")
	ret0, _ := ret[0].(float64)
	return ret0
}

// Percent indicates an expected call of Percent.
func (mr *MockProgresserMockRecorder) Percent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Percent", reflect.TypeOf((*MockProgresser)(nil).Percent))
}

// Step mocks base method.
func (m *MockProgresser) Step() models.ProgressStep {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Step")
	ret0, _ := ret[0].(models.ProgressStep)
	return ret0
}

// Step indicates an expected call of Step.
func (mr *MockProgresserMockRecorder) Step() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Step", reflect.TypeOf((*MockProgresser)(nil).Step))
}

// MockSubscriber is a mock of Subscriber interface.
type MockSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriberMockRecorder
}

// MockSubscriberMockRecorder is the mock recorder for MockSubscriber.
type MockSubscriberMockRecorder struct {
	mock *MockSubscriber
}

// NewMockSubscriber creates a new mock instance.
func NewMockSubscriber(ctrl *gomock.Controller) *MockSubscriber {
	mock := &MockSubscriber{ctrl: ctrl}
	mock.recorder = &MockSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriber) EXPECT() *MockSubscriberMockRecorder {
	return m.recorder
}

// GetOutput mocks base method.
func (m *MockSubscriber) GetOutput() chan models.Progresser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutput")
	ret0, _ := ret[0].(chan models.Progresser)
	return ret0
}

// GetOutput indicates an expected call of GetOutput.
func (mr *MockSubscriberMockRecorder) GetOutput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutput", reflect.TypeOf((*MockSubscriber)(nil).GetOutput))
}

// Unsubscribe mocks base method.
func (m *MockSubscriber) Unsubscribe() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe")
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockSubscriberMockRecorder) Unsubscribe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockSubscriber)(nil).Unsubscribe))
}

// MockPublishSubscriber is a mock of PublishSubscriber interface.
type MockPublishSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockPublishSubscriberMockRecorder
}

// MockPublishSubscriberMockRecorder is the mock recorder for MockPublishSubscriber.
type MockPublishSubscriberMockRecorder struct {
	mock *MockPublishSubscriber
}

// NewMockPublishSubscriber creates a new mock instance.
func NewMockPublishSubscriber(ctrl *gomock.Controller) *MockPublishSubscriber {
	mock := &MockPublishSubscriber{ctrl: ctrl}
	mock.recorder = &MockPublishSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublishSubscriber) EXPECT() *MockPublishSubscriberMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockPublishSubscriber) Publish(arg0 models.Progresser) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Publish", arg0)
}

// Publish indicates an expected call of Publish.
func (mr *MockPublishSubscriberMockRecorder) Publish(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPublishSubscriber)(nil).Publish), arg0)
}

// Subscribe mocks base method.
func (m *MockPublishSubscriber) Subscribe() models.Subscriber {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe")
	ret0, _ := ret[0].(models.Subscriber)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockPublishSubscriberMockRecorder) Subscribe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockPublishSubscriber)(nil).Subscribe))
}

// MockIAuthor is a mock of IAuthor interface.
type MockIAuthor struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthorMockRecorder
}

// MockIAuthorMockRecorder is the mock recorder for MockIAuthor.
type MockIAuthorMockRecorder struct {
	mock *MockIAuthor
}

// NewMockIAuthor creates a new mock instance.
func NewMockIAuthor(ctrl *gomock.Controller) *MockIAuthor {
	mock := &MockIAuthor{ctrl: ctrl}
	mock.recorder = &MockIAuthorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthor) EXPECT() *MockIAuthorMockRecorder {
	return m.recorder
}

// GetAuthorityKey mocks base method.
func (m *MockIAuthor) GetAuthorityKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorityKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAuthorityKey indicates an expected call of GetAuthorityKey.
func (mr *MockIAuthorMockRecorder) GetAuthorityKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorityKey", reflect.TypeOf((*MockIAuthor)(nil).GetAuthorityKey))
}

// GetName mocks base method.
func (m *MockIAuthor) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockIAuthorMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockIAuthor)(nil).GetName))
}

// GetSessionKey mocks base method.
func (m *MockIAuthor) GetSessionKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSessionKey indicates an expected call of GetSessionKey.
func (mr *MockIAuthorMockRecorder) GetSessionKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionKey", reflect.TypeOf((*MockIAuthor)(nil).GetSessionKey))
}

// IsEqual mocks base method.
func (m *MockIAuthor) IsEqual(arg0 models.IAuthor) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEqual", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEqual indicates an expected call of IsEqual.
func (mr *MockIAuthorMockRecorder) IsEqual(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEqual", reflect.TypeOf((*MockIAuthor)(nil).IsEqual), arg0)
}

// SetAuthorityKey mocks base method.
func (m *MockIAuthor) SetAuthorityKey(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAuthorityKey", key)
}

// SetAuthorityKey indicates an expected call of SetAuthorityKey.
func (mr *MockIAuthorMockRecorder) SetAuthorityKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAuthorityKey", reflect.TypeOf((*MockIAuthor)(nil).SetAuthorityKey), key)
}

// SetSessionKey mocks base method.
func (m *MockIAuthor) SetSessionKey(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSessionKey", key)
}

// SetSessionKey indicates an expected call of SetSessionKey.
func (mr *MockIAuthorMockRecorder) SetSessionKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSessionKey", reflect.TypeOf((*MockIAuthor)(nil).SetSessionKey), key)
}
