// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/distributed/models/interfaces.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/wailorman/fftb/pkg/distributed/models"
	files "github.com/wailorman/fftb/pkg/files"
)

// MockISegment is a mock of ISegment interface.
type MockISegment struct {
	ctrl     *gomock.Controller
	recorder *MockISegmentMockRecorder
}

// MockISegmentMockRecorder is the mock recorder for MockISegment.
type MockISegmentMockRecorder struct {
	mock *MockISegment
}

// NewMockISegment creates a new mock instance.
func NewMockISegment(ctrl *gomock.Controller) *MockISegment {
	mock := &MockISegment{ctrl: ctrl}
	mock.recorder = &MockISegmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISegment) EXPECT() *MockISegmentMockRecorder {
	return m.recorder
}

// GetID mocks base method.
func (m *MockISegment) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockISegmentMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockISegment)(nil).GetID))
}

// GetType mocks base method.
func (m *MockISegment) GetType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockISegmentMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockISegment)(nil).GetType))
}

// MockIDealer is a mock of IDealer interface.
type MockIDealer struct {
	ctrl     *gomock.Controller
	recorder *MockIDealerMockRecorder
}

// MockIDealerMockRecorder is the mock recorder for MockIDealer.
type MockIDealerMockRecorder struct {
	mock *MockIDealer
}

// NewMockIDealer creates a new mock instance.
func NewMockIDealer(ctrl *gomock.Controller) *MockIDealer {
	mock := &MockIDealer{ctrl: ctrl}
	mock.recorder = &MockIDealerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDealer) EXPECT() *MockIDealerMockRecorder {
	return m.recorder
}

// AllocateOutputStorageClaim mocks base method.
func (m *MockIDealer) AllocateOutputStorageClaim(ctx context.Context, performer models.IAuthor, segmentID string) (models.IStorageClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateOutputStorageClaim", ctx, performer, segmentID)
	ret0, _ := ret[0].(models.IStorageClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateOutputStorageClaim indicates an expected call of AllocateOutputStorageClaim.
func (mr *MockIDealerMockRecorder) AllocateOutputStorageClaim(ctx, performer, segmentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateOutputStorageClaim", reflect.TypeOf((*MockIDealer)(nil).AllocateOutputStorageClaim), ctx, performer, segmentID)
}

// AllocatePerformerAuthority mocks base method.
func (m *MockIDealer) AllocatePerformerAuthority(ctx context.Context, name string) (models.IAuthor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocatePerformerAuthority", ctx, name)
	ret0, _ := ret[0].(models.IAuthor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocatePerformerAuthority indicates an expected call of AllocatePerformerAuthority.
func (mr *MockIDealerMockRecorder) AllocatePerformerAuthority(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocatePerformerAuthority", reflect.TypeOf((*MockIDealer)(nil).AllocatePerformerAuthority), ctx, name)
}

// FailSegment mocks base method.
func (m *MockIDealer) FailSegment(ctx context.Context, performer models.IAuthor, id string, err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FailSegment", ctx, performer, id, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// FailSegment indicates an expected call of FailSegment.
func (mr *MockIDealerMockRecorder) FailSegment(ctx, performer, id, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailSegment", reflect.TypeOf((*MockIDealer)(nil).FailSegment), ctx, performer, id, err)
}

// FindFreeSegment mocks base method.
func (m *MockIDealer) FindFreeSegment(ctx context.Context, performer models.IAuthor) (models.ISegment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFreeSegment", ctx, performer)
	ret0, _ := ret[0].(models.ISegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFreeSegment indicates an expected call of FindFreeSegment.
func (mr *MockIDealerMockRecorder) FindFreeSegment(ctx, performer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFreeSegment", reflect.TypeOf((*MockIDealer)(nil).FindFreeSegment), ctx, performer)
}

// FinishSegment mocks base method.
func (m *MockIDealer) FinishSegment(ctx context.Context, performer models.IAuthor, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishSegment", ctx, performer, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinishSegment indicates an expected call of FinishSegment.
func (mr *MockIDealerMockRecorder) FinishSegment(ctx, performer, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishSegment", reflect.TypeOf((*MockIDealer)(nil).FinishSegment), ctx, performer, id)
}

// GetInputStorageClaim mocks base method.
func (m *MockIDealer) GetInputStorageClaim(ctx context.Context, performer models.IAuthor, segmentID string) (models.IStorageClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInputStorageClaim", ctx, performer, segmentID)
	ret0, _ := ret[0].(models.IStorageClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInputStorageClaim indicates an expected call of GetInputStorageClaim.
func (mr *MockIDealerMockRecorder) GetInputStorageClaim(ctx, performer, segmentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInputStorageClaim", reflect.TypeOf((*MockIDealer)(nil).GetInputStorageClaim), ctx, performer, segmentID)
}

// NotifyProcess mocks base method.
func (m *MockIDealer) NotifyProcess(ctx context.Context, performer models.IAuthor, segmentID string, p models.IProgress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyProcess", ctx, performer, segmentID, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyProcess indicates an expected call of NotifyProcess.
func (mr *MockIDealerMockRecorder) NotifyProcess(ctx, performer, segmentID, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyProcess", reflect.TypeOf((*MockIDealer)(nil).NotifyProcess), ctx, performer, segmentID, p)
}

// NotifyRawDownload mocks base method.
func (m *MockIDealer) NotifyRawDownload(ctx context.Context, performer models.IAuthor, segmentID string, p models.IProgress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyRawDownload", ctx, performer, segmentID, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyRawDownload indicates an expected call of NotifyRawDownload.
func (mr *MockIDealerMockRecorder) NotifyRawDownload(ctx, performer, segmentID, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyRawDownload", reflect.TypeOf((*MockIDealer)(nil).NotifyRawDownload), ctx, performer, segmentID, p)
}

// NotifyResultUpload mocks base method.
func (m *MockIDealer) NotifyResultUpload(ctx context.Context, performer models.IAuthor, segmentID string, p models.IProgress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyResultUpload", ctx, performer, segmentID, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyResultUpload indicates an expected call of NotifyResultUpload.
func (mr *MockIDealerMockRecorder) NotifyResultUpload(ctx, performer, segmentID, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyResultUpload", reflect.TypeOf((*MockIDealer)(nil).NotifyResultUpload), ctx, performer, segmentID, p)
}

// QuitSegment mocks base method.
func (m *MockIDealer) QuitSegment(ctx context.Context, performer models.IAuthor, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuitSegment", ctx, performer, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// QuitSegment indicates an expected call of QuitSegment.
func (mr *MockIDealerMockRecorder) QuitSegment(ctx, performer, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuitSegment", reflect.TypeOf((*MockIDealer)(nil).QuitSegment), ctx, performer, id)
}

// MockIWorkerDealer is a mock of IWorkerDealer interface.
type MockIWorkerDealer struct {
	ctrl     *gomock.Controller
	recorder *MockIWorkerDealerMockRecorder
}

// MockIWorkerDealerMockRecorder is the mock recorder for MockIWorkerDealer.
type MockIWorkerDealerMockRecorder struct {
	mock *MockIWorkerDealer
}

// NewMockIWorkerDealer creates a new mock instance.
func NewMockIWorkerDealer(ctrl *gomock.Controller) *MockIWorkerDealer {
	mock := &MockIWorkerDealer{ctrl: ctrl}
	mock.recorder = &MockIWorkerDealerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWorkerDealer) EXPECT() *MockIWorkerDealerMockRecorder {
	return m.recorder
}

// AllocateOutputStorageClaim mocks base method.
func (m *MockIWorkerDealer) AllocateOutputStorageClaim(ctx context.Context, performer models.IAuthor, segmentID string) (models.IStorageClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateOutputStorageClaim", ctx, performer, segmentID)
	ret0, _ := ret[0].(models.IStorageClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateOutputStorageClaim indicates an expected call of AllocateOutputStorageClaim.
func (mr *MockIWorkerDealerMockRecorder) AllocateOutputStorageClaim(ctx, performer, segmentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateOutputStorageClaim", reflect.TypeOf((*MockIWorkerDealer)(nil).AllocateOutputStorageClaim), ctx, performer, segmentID)
}

// AllocatePerformerAuthority mocks base method.
func (m *MockIWorkerDealer) AllocatePerformerAuthority(ctx context.Context, name string) (models.IAuthor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocatePerformerAuthority", ctx, name)
	ret0, _ := ret[0].(models.IAuthor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocatePerformerAuthority indicates an expected call of AllocatePerformerAuthority.
func (mr *MockIWorkerDealerMockRecorder) AllocatePerformerAuthority(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocatePerformerAuthority", reflect.TypeOf((*MockIWorkerDealer)(nil).AllocatePerformerAuthority), ctx, name)
}

// FailSegment mocks base method.
func (m *MockIWorkerDealer) FailSegment(ctx context.Context, performer models.IAuthor, id string, err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FailSegment", ctx, performer, id, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// FailSegment indicates an expected call of FailSegment.
func (mr *MockIWorkerDealerMockRecorder) FailSegment(ctx, performer, id, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailSegment", reflect.TypeOf((*MockIWorkerDealer)(nil).FailSegment), ctx, performer, id, err)
}

// FindFreeSegment mocks base method.
func (m *MockIWorkerDealer) FindFreeSegment(ctx context.Context, performer models.IAuthor) (models.ISegment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFreeSegment", ctx, performer)
	ret0, _ := ret[0].(models.ISegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFreeSegment indicates an expected call of FindFreeSegment.
func (mr *MockIWorkerDealerMockRecorder) FindFreeSegment(ctx, performer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFreeSegment", reflect.TypeOf((*MockIWorkerDealer)(nil).FindFreeSegment), ctx, performer)
}

// FinishSegment mocks base method.
func (m *MockIWorkerDealer) FinishSegment(ctx context.Context, performer models.IAuthor, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishSegment", ctx, performer, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinishSegment indicates an expected call of FinishSegment.
func (mr *MockIWorkerDealerMockRecorder) FinishSegment(ctx, performer, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishSegment", reflect.TypeOf((*MockIWorkerDealer)(nil).FinishSegment), ctx, performer, id)
}

// GetInputStorageClaim mocks base method.
func (m *MockIWorkerDealer) GetInputStorageClaim(ctx context.Context, performer models.IAuthor, segmentID string) (models.IStorageClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInputStorageClaim", ctx, performer, segmentID)
	ret0, _ := ret[0].(models.IStorageClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInputStorageClaim indicates an expected call of GetInputStorageClaim.
func (mr *MockIWorkerDealerMockRecorder) GetInputStorageClaim(ctx, performer, segmentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInputStorageClaim", reflect.TypeOf((*MockIWorkerDealer)(nil).GetInputStorageClaim), ctx, performer, segmentID)
}

// NotifyProcess mocks base method.
func (m *MockIWorkerDealer) NotifyProcess(ctx context.Context, performer models.IAuthor, segmentID string, p models.IProgress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyProcess", ctx, performer, segmentID, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyProcess indicates an expected call of NotifyProcess.
func (mr *MockIWorkerDealerMockRecorder) NotifyProcess(ctx, performer, segmentID, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyProcess", reflect.TypeOf((*MockIWorkerDealer)(nil).NotifyProcess), ctx, performer, segmentID, p)
}

// NotifyRawDownload mocks base method.
func (m *MockIWorkerDealer) NotifyRawDownload(ctx context.Context, performer models.IAuthor, segmentID string, p models.IProgress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyRawDownload", ctx, performer, segmentID, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyRawDownload indicates an expected call of NotifyRawDownload.
func (mr *MockIWorkerDealerMockRecorder) NotifyRawDownload(ctx, performer, segmentID, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyRawDownload", reflect.TypeOf((*MockIWorkerDealer)(nil).NotifyRawDownload), ctx, performer, segmentID, p)
}

// NotifyResultUpload mocks base method.
func (m *MockIWorkerDealer) NotifyResultUpload(ctx context.Context, performer models.IAuthor, segmentID string, p models.IProgress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyResultUpload", ctx, performer, segmentID, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyResultUpload indicates an expected call of NotifyResultUpload.
func (mr *MockIWorkerDealerMockRecorder) NotifyResultUpload(ctx, performer, segmentID, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyResultUpload", reflect.TypeOf((*MockIWorkerDealer)(nil).NotifyResultUpload), ctx, performer, segmentID, p)
}

// QuitSegment mocks base method.
func (m *MockIWorkerDealer) QuitSegment(ctx context.Context, performer models.IAuthor, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuitSegment", ctx, performer, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// QuitSegment indicates an expected call of QuitSegment.
func (mr *MockIWorkerDealerMockRecorder) QuitSegment(ctx, performer, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuitSegment", reflect.TypeOf((*MockIWorkerDealer)(nil).QuitSegment), ctx, performer, id)
}

// MockIStorageClaim is a mock of IStorageClaim interface.
type MockIStorageClaim struct {
	ctrl     *gomock.Controller
	recorder *MockIStorageClaimMockRecorder
}

// MockIStorageClaimMockRecorder is the mock recorder for MockIStorageClaim.
type MockIStorageClaimMockRecorder struct {
	mock *MockIStorageClaim
}

// NewMockIStorageClaim creates a new mock instance.
func NewMockIStorageClaim(ctrl *gomock.Controller) *MockIStorageClaim {
	mock := &MockIStorageClaim{ctrl: ctrl}
	mock.recorder = &MockIStorageClaimMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStorageClaim) EXPECT() *MockIStorageClaimMockRecorder {
	return m.recorder
}

// GetID mocks base method.
func (m *MockIStorageClaim) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockIStorageClaimMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockIStorageClaim)(nil).GetID))
}

// GetName mocks base method.
func (m *MockIStorageClaim) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockIStorageClaimMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockIStorageClaim)(nil).GetName))
}

// GetSize mocks base method.
func (m *MockIStorageClaim) GetSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetSize indicates an expected call of GetSize.
func (mr *MockIStorageClaimMockRecorder) GetSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSize", reflect.TypeOf((*MockIStorageClaim)(nil).GetSize))
}

// GetType mocks base method.
func (m *MockIStorageClaim) GetType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockIStorageClaimMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockIStorageClaim)(nil).GetType))
}

// GetURL mocks base method.
func (m *MockIStorageClaim) GetURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetURL indicates an expected call of GetURL.
func (mr *MockIStorageClaimMockRecorder) GetURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockIStorageClaim)(nil).GetURL))
}

// ReadTo mocks base method.
func (m *MockIStorageClaim) ReadTo(arg0 io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadTo indicates an expected call of ReadTo.
func (mr *MockIStorageClaimMockRecorder) ReadTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTo", reflect.TypeOf((*MockIStorageClaim)(nil).ReadTo), arg0)
}

// WriteFrom mocks base method.
func (m *MockIStorageClaim) WriteFrom(arg0 io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFrom", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFrom indicates an expected call of WriteFrom.
func (mr *MockIStorageClaimMockRecorder) WriteFrom(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFrom", reflect.TypeOf((*MockIStorageClaim)(nil).WriteFrom), arg0)
}

// MockIStorageClient is a mock of IStorageClient interface.
type MockIStorageClient struct {
	ctrl     *gomock.Controller
	recorder *MockIStorageClientMockRecorder
}

// MockIStorageClientMockRecorder is the mock recorder for MockIStorageClient.
type MockIStorageClientMockRecorder struct {
	mock *MockIStorageClient
}

// NewMockIStorageClient creates a new mock instance.
func NewMockIStorageClient(ctrl *gomock.Controller) *MockIStorageClient {
	mock := &MockIStorageClient{ctrl: ctrl}
	mock.recorder = &MockIStorageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStorageClient) EXPECT() *MockIStorageClientMockRecorder {
	return m.recorder
}

// BuildStorageClaimByURL mocks base method.
func (m *MockIStorageClient) BuildStorageClaimByURL(url string) (models.IStorageClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildStorageClaimByURL", url)
	ret0, _ := ret[0].(models.IStorageClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildStorageClaimByURL indicates an expected call of BuildStorageClaimByURL.
func (mr *MockIStorageClientMockRecorder) BuildStorageClaimByURL(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildStorageClaimByURL", reflect.TypeOf((*MockIStorageClient)(nil).BuildStorageClaimByURL), url)
}

// MakeLocalCopy mocks base method.
func (m *MockIStorageClient) MakeLocalCopy(ctx context.Context, sc models.IStorageClaim, p chan models.IProgress) (files.Filer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeLocalCopy", ctx, sc, p)
	ret0, _ := ret[0].(files.Filer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeLocalCopy indicates an expected call of MakeLocalCopy.
func (mr *MockIStorageClientMockRecorder) MakeLocalCopy(ctx, sc, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeLocalCopy", reflect.TypeOf((*MockIStorageClient)(nil).MakeLocalCopy), ctx, sc, p)
}

// MoveFileToStorageClaim mocks base method.
func (m *MockIStorageClient) MoveFileToStorageClaim(ctx context.Context, file files.Filer, sc models.IStorageClaim, p chan models.IProgress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveFileToStorageClaim", ctx, file, sc, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveFileToStorageClaim indicates an expected call of MoveFileToStorageClaim.
func (mr *MockIStorageClientMockRecorder) MoveFileToStorageClaim(ctx, file, sc, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveFileToStorageClaim", reflect.TypeOf((*MockIStorageClient)(nil).MoveFileToStorageClaim), ctx, file, sc, p)
}

// RemoveLocalCopy mocks base method.
func (m *MockIStorageClient) RemoveLocalCopy(ctx context.Context, sc models.IStorageClaim) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLocalCopy", ctx, sc)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLocalCopy indicates an expected call of RemoveLocalCopy.
func (mr *MockIStorageClientMockRecorder) RemoveLocalCopy(ctx, sc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLocalCopy", reflect.TypeOf((*MockIStorageClient)(nil).RemoveLocalCopy), ctx, sc)
}

// MockIProgress is a mock of IProgress interface.
type MockIProgress struct {
	ctrl     *gomock.Controller
	recorder *MockIProgressMockRecorder
}

// MockIProgressMockRecorder is the mock recorder for MockIProgress.
type MockIProgressMockRecorder struct {
	mock *MockIProgress
}

// NewMockIProgress creates a new mock instance.
func NewMockIProgress(ctrl *gomock.Controller) *MockIProgress {
	mock := &MockIProgress{ctrl: ctrl}
	mock.recorder = &MockIProgressMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProgress) EXPECT() *MockIProgressMockRecorder {
	return m.recorder
}

// Percent mocks base method.
func (m *MockIProgress) Percent() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Percent")
	ret0, _ := ret[0].(float64)
	return ret0
}

// Percent indicates an expected call of Percent.
func (mr *MockIProgressMockRecorder) Percent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Percent", reflect.TypeOf((*MockIProgress)(nil).Percent))
}

// Step mocks base method.
func (m *MockIProgress) Step() models.ProgressStep {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Step")
	ret0, _ := ret[0].(models.ProgressStep)
	return ret0
}

// Step indicates an expected call of Step.
func (mr *MockIProgressMockRecorder) Step() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Step", reflect.TypeOf((*MockIProgress)(nil).Step))
}

// MockIAuthor is a mock of IAuthor interface.
type MockIAuthor struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthorMockRecorder
}

// MockIAuthorMockRecorder is the mock recorder for MockIAuthor.
type MockIAuthorMockRecorder struct {
	mock *MockIAuthor
}

// NewMockIAuthor creates a new mock instance.
func NewMockIAuthor(ctrl *gomock.Controller) *MockIAuthor {
	mock := &MockIAuthor{ctrl: ctrl}
	mock.recorder = &MockIAuthorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthor) EXPECT() *MockIAuthorMockRecorder {
	return m.recorder
}

// GetName mocks base method.
func (m *MockIAuthor) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockIAuthorMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockIAuthor)(nil).GetName))
}
